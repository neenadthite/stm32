
5_USARTtransmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008330  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084fc  080084fc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000090  08008594  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  08008594  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b73b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d3f  00000000  00000000  0003b7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000407f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001957d  00000000  00000000  00041930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c75  00000000  00000000  0005aead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009061e  00000000  00000000  00073b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  00104194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080084b0 	.word	0x080084b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	080084b0 	.word	0x080084b0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fd11 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f825 	bl	8000538 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ee:	f000 f88b 	bl	8000608 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  char *msg = "Hello World!!";
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <main+0x50>)
 80004f4:	607b      	str	r3, [r7, #4]
  HAL_USART_Transmit(&husart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff fe6e 	bl	80001d8 <strlen>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	480b      	ldr	r0, [pc, #44]	; (8000534 <main+0x54>)
 8000508:	f004 fa28 	bl	800495c <HAL_USART_Transmit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f98a 	bl	8000824 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000510:	f000 f89a 	bl	8000648 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000514:	f000 f8c6 	bl	80006a4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000518:	f000 f8f2 	bl	8000700 <MX_I2S3_Init>
  MX_SPI1_Init();
 800051c:	f000 f920 	bl	8000760 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000520:	f007 fbb4 	bl	8007c8c <MX_USB_HOST_Init>
  MX_USART1_Init();
 8000524:	f000 f952 	bl	80007cc <MX_USART1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000528:	f007 fbd6 	bl	8007cd8 <MX_USB_HOST_Process>
 800052c:	e7fc      	b.n	8000528 <main+0x48>
 800052e:	bf00      	nop
 8000530:	080084c8 	.word	0x080084c8
 8000534:	20000168 	.word	0x20000168

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 fee2 	bl	8008310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xc8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a26      	ldr	r2, [pc, #152]	; (8000600 <SystemClock_Config+0xc8>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <SystemClock_Config+0xcc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <SystemClock_Config+0xcc>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000598:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ac:	23c0      	movs	r3, #192	; 0xc0
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fb3f 	bl	8003c40 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 fa06 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2103      	movs	r1, #3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fda1 	bl	8004130 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f4:	f000 f9f0 	bl	80009d8 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	; 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800061e:	2301      	movs	r3, #1
 8000620:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000622:	23c8      	movs	r3, #200	; 0xc8
 8000624:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000626:	2305      	movs	r3, #5
 8000628:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4618      	mov	r0, r3
 8000632:	f003 ff79 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800063c:	f000 f9cc 	bl	80009d8 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_I2C1_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C1_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_I2C1_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C1_Init+0x50>)
 8000686:	f002 fcf7 	bl	8003078 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f9a2 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000bc 	.word	0x200000bc
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_I2S2_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006ca:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <MX_I2S2_Init+0x58>)
 80006cc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006dc:	2201      	movs	r2, #1
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2S2_Init+0x50>)
 80006e2:	f002 fe0d 	bl	8003300 <HAL_I2S_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f974 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200001ac 	.word	0x200001ac
 80006f8:	40003800 	.word	0x40003800
 80006fc:	00017700 	.word	0x00017700

08000700 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_I2S3_Init+0x54>)
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <MX_I2S3_Init+0x58>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2S3_Init+0x54>)
 800070c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000710:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_I2S3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2S3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_I2S3_Init+0x54>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_I2S3_Init+0x54>)
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <MX_I2S3_Init+0x5c>)
 800072a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_I2S3_Init+0x54>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2S3_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_I2S3_Init+0x54>)
 8000740:	f002 fdde 	bl	8003300 <HAL_I2S_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800074a:	f000 f945 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200001f4 	.word	0x200001f4
 8000758:	40003c00 	.word	0x40003c00
 800075c:	00017700 	.word	0x00017700

08000760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_SPI1_Init+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_SPI1_Init+0x64>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007ac:	220a      	movs	r2, #10
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_SPI1_Init+0x64>)
 80007b2:	f004 f809 	bl	80047c8 <HAL_SPI_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 f90c 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000110 	.word	0x20000110
 80007c8:	40013000 	.word	0x40013000

080007cc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USART1_Init+0x50>)
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_USART1_Init+0x54>)
 80007d4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART1_Init+0x50>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_USART1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_USART1_Init+0x50>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_USART1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_USART1_Init+0x50>)
 800080a:	f004 f866 	bl	80048da <HAL_USART_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 f8e0 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000168 	.word	0x20000168
 8000820:	40011000 	.word	0x40011000

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a60      	ldr	r2, [pc, #384]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5e      	ldr	r3, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a59      	ldr	r2, [pc, #356]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a52      	ldr	r2, [pc, #328]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b50      	ldr	r3, [pc, #320]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a4b      	ldr	r2, [pc, #300]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b45      	ldr	r3, [pc, #276]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a44      	ldr	r2, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a3d      	ldr	r2, [pc, #244]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x1a0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4838      	ldr	r0, [pc, #224]	; (80009c8 <MX_GPIO_Init+0x1a4>)
 80008e8:	f000 fe3c 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	4836      	ldr	r0, [pc, #216]	; (80009cc <MX_GPIO_Init+0x1a8>)
 80008f2:	f000 fe37 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008fc:	4834      	ldr	r0, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x1ac>)
 80008fe:	f000 fe31 	bl	8001564 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000902:	2304      	movs	r3, #4
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	482c      	ldr	r0, [pc, #176]	; (80009c8 <MX_GPIO_Init+0x1a4>)
 8000916:	f000 fca1 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4825      	ldr	r0, [pc, #148]	; (80009c8 <MX_GPIO_Init+0x1a4>)
 8000932:	f000 fc93 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000936:	2332      	movs	r3, #50	; 0x32
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	481f      	ldr	r0, [pc, #124]	; (80009c8 <MX_GPIO_Init+0x1a4>)
 800094c:	f000 fc86 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000950:	2301      	movs	r3, #1
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4819      	ldr	r0, [pc, #100]	; (80009cc <MX_GPIO_Init+0x1a8>)
 8000968:	f000 fc78 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_GPIO_Init+0x1b0>)
 8000982:	f000 fc6b 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000986:	f24f 0310 	movw	r3, #61456	; 0xf010
 800098a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0x1ac>)
 80009a0:	f000 fc5c 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_GPIO_Init+0x1ac>)
 80009b8:	f000 fc50 	bl	800125c <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	; 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fbd8 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_I2C_MspInit+0x84>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d12c      	bne.n	8000ab0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <HAL_I2C_MspInit+0x8c>)
 8000a90:	f000 fbe4 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000a9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_I2C_MspInit+0x88>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40005400 	.word	0x40005400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a59      	ldr	r2, [pc, #356]	; (8000c48 <HAL_I2S_MspInit+0x184>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d15b      	bne.n	8000b9e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	4b58      	ldr	r3, [pc, #352]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b55      	ldr	r3, [pc, #340]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
 8000b06:	4b51      	ldr	r3, [pc, #324]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a50      	ldr	r2, [pc, #320]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b4e      	ldr	r3, [pc, #312]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a49      	ldr	r2, [pc, #292]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	483e      	ldr	r0, [pc, #248]	; (8000c50 <HAL_I2S_MspInit+0x18c>)
 8000b56:	f000 fb81 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4836      	ldr	r0, [pc, #216]	; (8000c50 <HAL_I2S_MspInit+0x18c>)
 8000b76:	f000 fb71 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	482f      	ldr	r0, [pc, #188]	; (8000c54 <HAL_I2S_MspInit+0x190>)
 8000b98:	f000 fb60 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b9c:	e04f      	b.n	8000c3e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <HAL_I2S_MspInit+0x194>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d14a      	bne.n	8000c3e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_I2S_MspInit+0x188>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <HAL_I2S_MspInit+0x198>)
 8000c18:	f000 fb20 	bl	800125c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_I2S_MspInit+0x18c>)
 8000c3a:	f000 fb0f 	bl	800125c <HAL_GPIO_Init>
}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40003800 	.word	0x40003800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40003c00 	.word	0x40003c00
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_SPI_MspInit+0x8c>)
 8000cd6:	f000 fac1 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <HAL_USART_MspInit+0xc0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d14a      	bne.n	8000da8 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_USART_MspInit+0xc4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000d66:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <HAL_USART_MspInit+0xc8>)
 8000d84:	f000 fa6a 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <HAL_USART_MspInit+0xcc>)
 8000da4:	f000 fa5a 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8d0 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <OTG_FS_IRQHandler+0x10>)
 8000e1a:	f000 fe27 	bl	8001a6c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000618 	.word	0x20000618

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f007 fa20 	bl	800829c <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20020000 	.word	0x20020000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	200000ac 	.word	0x200000ac
 8000e90:	20000930 	.word	0x20000930

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f007 f9df 	bl	80082a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff faf9 	bl	80004e0 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000efc:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 8000f00:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f04:	2000092c 	.word	0x2000092c

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f94f 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fd50 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f967 	bl	8001242 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f92f 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	2000023c 	.word	0x2000023c

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000023c 	.word	0x2000023c

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff3e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff31 	bl	800109c <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e159      	b.n	800152c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	429a      	cmp	r2, r3
 8001292:	f040 8148 	bne.w	8001526 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d005      	beq.n	80012ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d130      	bne.n	8001310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 0201 	and.w	r2, r3, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b03      	cmp	r3, #3
 800131a:	d017      	beq.n	800134c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d123      	bne.n	80013a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	69b9      	ldr	r1, [r7, #24]
 800139c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a2 	beq.w	8001526 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_GPIO_Init+0x2e8>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a56      	ldr	r2, [pc, #344]	; (8001544 <HAL_GPIO_Init+0x2e8>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b54      	ldr	r3, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x2e8>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fe:	4a52      	ldr	r2, [pc, #328]	; (8001548 <HAL_GPIO_Init+0x2ec>)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a49      	ldr	r2, [pc, #292]	; (800154c <HAL_GPIO_Init+0x2f0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x202>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_GPIO_Init+0x2f4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x1fe>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a47      	ldr	r2, [pc, #284]	; (8001554 <HAL_GPIO_Init+0x2f8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x1fa>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a46      	ldr	r2, [pc, #280]	; (8001558 <HAL_GPIO_Init+0x2fc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x1f6>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a45      	ldr	r2, [pc, #276]	; (800155c <HAL_GPIO_Init+0x300>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x1f2>
 800144a:	2304      	movs	r3, #4
 800144c:	e008      	b.n	8001460 <HAL_GPIO_Init+0x204>
 800144e:	2307      	movs	r3, #7
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x204>
 8001452:	2303      	movs	r3, #3
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x204>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x204>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x204>
 800145e:	2300      	movs	r3, #0
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x2ec>)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_GPIO_Init+0x304>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x304>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014a8:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_GPIO_Init+0x304>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014cc:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_GPIO_Init+0x304>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_GPIO_Init+0x304>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x304>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_GPIO_Init+0x304>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_GPIO_Init+0x304>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	f67f aea2 	bls.w	8001278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40013c00 	.word	0x40013c00

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b08f      	sub	sp, #60	; 0x3c
 800159a:	af0a      	add	r7, sp, #40	; 0x28
 800159c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e054      	b.n	8001652 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f006 fbc0 	bl	8007d48 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fd16 	bl	8005018 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	687e      	ldr	r6, [r7, #4]
 80015f4:	466d      	mov	r5, sp
 80015f6:	f106 0410 	add.w	r4, r6, #16
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001606:	e885 0003 	stmia.w	r5, {r0, r1}
 800160a:	1d33      	adds	r3, r6, #4
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	6838      	ldr	r0, [r7, #0]
 8001610:	f003 fc90 	bl	8004f34 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fd0d 	bl	800503a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	687e      	ldr	r6, [r7, #4]
 8001628:	466d      	mov	r5, sp
 800162a:	f106 0410 	add.w	r4, r6, #16
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800163a:	e885 0003 	stmia.w	r5, {r0, r1}
 800163e:	1d33      	adds	r3, r6, #4
 8001640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f003 fe74 	bl	8005330 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800165a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800165a:	b590      	push	{r4, r7, lr}
 800165c:	b089      	sub	sp, #36	; 0x24
 800165e:	af04      	add	r7, sp, #16
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	4608      	mov	r0, r1
 8001664:	4611      	mov	r1, r2
 8001666:	461a      	mov	r2, r3
 8001668:	4603      	mov	r3, r0
 800166a:	70fb      	strb	r3, [r7, #3]
 800166c:	460b      	mov	r3, r1
 800166e:	70bb      	strb	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_HCD_HC_Init+0x28>
 800167e:	2302      	movs	r3, #2
 8001680:	e076      	b.n	8001770 <HAL_HCD_HC_Init+0x116>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	212c      	movs	r1, #44	; 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	333d      	adds	r3, #61	; 0x3d
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	3338      	adds	r3, #56	; 0x38
 80016aa:	787a      	ldrb	r2, [r7, #1]
 80016ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3340      	adds	r3, #64	; 0x40
 80016bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	212c      	movs	r1, #44	; 0x2c
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	3339      	adds	r3, #57	; 0x39
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	333f      	adds	r3, #63	; 0x3f
 80016e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	78ba      	ldrb	r2, [r7, #2]
 80016ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016ee:	b2d0      	uxtb	r0, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	333a      	adds	r3, #58	; 0x3a
 80016fc:	4602      	mov	r2, r0
 80016fe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001700:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da09      	bge.n	800171c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	333b      	adds	r3, #59	; 0x3b
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e008      	b.n	800172e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	333b      	adds	r3, #59	; 0x3b
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	333c      	adds	r3, #60	; 0x3c
 800173c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001740:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	787c      	ldrb	r4, [r7, #1]
 8001748:	78ba      	ldrb	r2, [r7, #2]
 800174a:	78f9      	ldrb	r1, [r7, #3]
 800174c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4623      	mov	r3, r4
 800175e:	f003 ff61 	bl	8005624 <USB_HC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_HCD_HC_Halt+0x1e>
 8001792:	2302      	movs	r3, #2
 8001794:	e00f      	b.n	80017b6 <HAL_HCD_HC_Halt+0x3e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	78fa      	ldrb	r2, [r7, #3]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 f99d 	bl	8005ae6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4603      	mov	r3, r0
 80017d0:	70fb      	strb	r3, [r7, #3]
 80017d2:	460b      	mov	r3, r1
 80017d4:	70bb      	strb	r3, [r7, #2]
 80017d6:	4613      	mov	r3, r2
 80017d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	333b      	adds	r3, #59	; 0x3b
 80017e8:	78ba      	ldrb	r2, [r7, #2]
 80017ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	333f      	adds	r3, #63	; 0x3f
 80017fa:	787a      	ldrb	r2, [r7, #1]
 80017fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017fe:	7c3b      	ldrb	r3, [r7, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d112      	bne.n	800182a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3342      	adds	r3, #66	; 0x42
 8001812:	2203      	movs	r2, #3
 8001814:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	333d      	adds	r3, #61	; 0x3d
 8001824:	7f3a      	ldrb	r2, [r7, #28]
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e008      	b.n	800183c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	3342      	adds	r3, #66	; 0x42
 8001838:	2202      	movs	r2, #2
 800183a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b03      	cmp	r3, #3
 8001840:	f200 80c6 	bhi.w	80019d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001844:	a201      	add	r2, pc, #4	; (adr r2, 800184c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	0800185d 	.word	0x0800185d
 8001850:	080019bd 	.word	0x080019bd
 8001854:	080018c1 	.word	0x080018c1
 8001858:	0800193f 	.word	0x0800193f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800185c:	7c3b      	ldrb	r3, [r7, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	f040 80b8 	bne.w	80019d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001864:	78bb      	ldrb	r3, [r7, #2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 80b4 	bne.w	80019d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800186c:	8b3b      	ldrh	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	3355      	adds	r3, #85	; 0x55
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3355      	adds	r3, #85	; 0x55
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018aa:	e093      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3342      	adds	r3, #66	; 0x42
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e089      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018c0:	78bb      	ldrb	r3, [r7, #2]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d11d      	bne.n	8001902 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3355      	adds	r3, #85	; 0x55
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3342      	adds	r3, #66	; 0x42
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018ec:	e073      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3342      	adds	r3, #66	; 0x42
 80018fc:	2202      	movs	r2, #2
 80018fe:	701a      	strb	r2, [r3, #0]
      break;
 8001900:	e069      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3354      	adds	r3, #84	; 0x54
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3342      	adds	r3, #66	; 0x42
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e055      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3342      	adds	r3, #66	; 0x42
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
      break;
 800193c:	e04b      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800193e:	78bb      	ldrb	r3, [r7, #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11d      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3355      	adds	r3, #85	; 0x55
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3342      	adds	r3, #66	; 0x42
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800196a:	e034      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	3342      	adds	r3, #66	; 0x42
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e02a      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3354      	adds	r3, #84	; 0x54
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d109      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3342      	adds	r3, #66	; 0x42
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
      break;
 80019a6:	e016      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3342      	adds	r3, #66	; 0x42
 80019b6:	2202      	movs	r2, #2
 80019b8:	701a      	strb	r2, [r3, #0]
      break;
 80019ba:	e00c      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3342      	adds	r3, #66	; 0x42
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
      break;
 80019ce:	e002      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019d0:	bf00      	nop
 80019d2:	e000      	b.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3344      	adds	r3, #68	; 0x44
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	8b3a      	ldrh	r2, [r7, #24]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	202c      	movs	r0, #44	; 0x2c
 80019f0:	fb00 f303 	mul.w	r3, r0, r3
 80019f4:	440b      	add	r3, r1
 80019f6:	334c      	adds	r3, #76	; 0x4c
 80019f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3360      	adds	r3, #96	; 0x60
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3350      	adds	r3, #80	; 0x50
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3339      	adds	r3, #57	; 0x39
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3361      	adds	r3, #97	; 0x61
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	222c      	movs	r2, #44	; 0x2c
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	3338      	adds	r3, #56	; 0x38
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	18d1      	adds	r1, r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f003 fef0 	bl	8005840 <USB_HC_StartXfer>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop

08001a6c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fc13 	bl	80052ae <USB_GetMode>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	f040 80f6 	bne.w	8001c7c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fbf7 	bl	8005288 <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80ec 	beq.w	8001c7a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fbee 	bl	8005288 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ab6:	d104      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fbde 	bl	8005288 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad6:	d104      	bne.n	8001ae2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fbce 	bl	8005288 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001af6:	d104      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fbbe 	bl	8005288 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d103      	bne.n	8001b1e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fbb0 	bl	8005288 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b32:	d11c      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b3c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b4e:	2110      	movs	r1, #16
 8001b50:	6938      	ldr	r0, [r7, #16]
 8001b52:	f003 fabf 	bl	80050d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b56:	6938      	ldr	r0, [r7, #16]
 8001b58:	f003 fae0 	bl	800511c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fc98 	bl	8005498 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f006 f96b 	bl	8007e44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fb88 	bl	8005288 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b82:	d102      	bne.n	8001b8a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f001 fa03 	bl	8002f90 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fb7a 	bl	8005288 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d106      	bne.n	8001bac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f006 f934 	bl	8007e0c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fb69 	bl	8005288 <USB_ReadInterrupts>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d101      	bne.n	8001bc4 <HAL_HCD_IRQHandler+0x158>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_HCD_IRQHandler+0x15a>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d012      	beq.n	8001bf0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0210 	bic.w	r2, r2, #16
 8001bd8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f001 f906 	bl	8002dec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0210 	orr.w	r2, r2, #16
 8001bee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fb47 	bl	8005288 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c04:	d13a      	bne.n	8001c7c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 ff5a 	bl	8005ac4 <USB_HC_ReadInterrupt>
 8001c10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e025      	b.n	8001c64 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d018      	beq.n	8001c5e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c42:	d106      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8ab 	bl	8001da6 <HCD_HC_IN_IRQHandler>
 8001c50:	e005      	b.n	8001c5e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fcc6 	bl	80025ea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3d4      	bcc.n	8001c18 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	e000      	b.n	8001c7c <HAL_HCD_IRQHandler+0x210>
      return;
 8001c7a:	bf00      	nop
    }
  }
}
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_HCD_Start+0x16>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e013      	b.n	8001cc0 <HAL_HCD_Start+0x3e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fc5a 	bl	8005560 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 f9a0 	bl	8004ff6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_HCD_Stop+0x16>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e00d      	b.n	8001cfa <HAL_HCD_Stop+0x32>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 f854 	bl	8005d98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fbfc 	bl	800550c <USB_ResetPort>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3360      	adds	r3, #96	; 0x60
 8001d38:	781b      	ldrb	r3, [r3, #0]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	212c      	movs	r1, #44	; 0x2c
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3350      	adds	r3, #80	; 0x50
 8001d60:	681b      	ldr	r3, [r3, #0]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fc40 	bl	8005600 <USB_GetCurrentFrame>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fc1b 	bl	80055d2 <USB_GetHostSpeed>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d119      	bne.n	8001e0a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	461a      	mov	r2, r3
 8001de4:	2304      	movs	r3, #4
 8001de6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	0151      	lsls	r1, r2, #5
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	440a      	add	r2, r1
 8001dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	60d3      	str	r3, [r2, #12]
 8001e08:	e101      	b.n	800200e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e20:	d12b      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3361      	adds	r3, #97	; 0x61
 8001e44:	2207      	movs	r2, #7
 8001e46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	0151      	lsls	r1, r2, #5
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	440a      	add	r2, r1
 8001e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fe37 	bl	8005ae6 <USB_HC_Halt>
 8001e78:	e0c9      	b.n	800200e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d109      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	6093      	str	r3, [r2, #8]
 8001ea2:	e0b4      	b.n	800200e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d133      	bne.n	8001f22 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	0151      	lsls	r1, r2, #5
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	440a      	add	r2, r1
 8001ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	212c      	movs	r1, #44	; 0x2c
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3361      	adds	r3, #97	; 0x61
 8001ee8:	2205      	movs	r2, #5
 8001eea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2310      	movs	r3, #16
 8001efc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fde3 	bl	8005ae6 <USB_HC_Halt>
 8001f20:	e075      	b.n	800200e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f38:	d134      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	0151      	lsls	r1, r2, #5
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	440a      	add	r2, r1
 8001f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3361      	adds	r3, #97	; 0x61
 8001f68:	2208      	movs	r2, #8
 8001f6a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 fda2 	bl	8005ae6 <USB_HC_Halt>
 8001fa2:	e034      	b.n	800200e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d129      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	0151      	lsls	r1, r2, #5
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3361      	adds	r3, #97	; 0x61
 8001fe8:	2206      	movs	r2, #6
 8001fea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fd75 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d122      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	0151      	lsls	r1, r2, #5
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	440a      	add	r2, r1
 800203c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fd48 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002068:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800206a:	e2ba      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	f040 811b 	bne.w	80022ba <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d019      	beq.n	80020c0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3348      	adds	r3, #72	; 0x48
 800209a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0159      	lsls	r1, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	440b      	add	r3, r1
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020ae:	1ad2      	subs	r2, r2, r3
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	202c      	movs	r0, #44	; 0x2c
 80020b6:	fb00 f303 	mul.w	r3, r0, r3
 80020ba:	440b      	add	r3, r1
 80020bc:	3350      	adds	r3, #80	; 0x50
 80020be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3361      	adds	r3, #97	; 0x61
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	335c      	adds	r3, #92	; 0x5c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	2301      	movs	r3, #1
 80020f4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	333f      	adds	r3, #63	; 0x3f
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	333f      	adds	r3, #63	; 0x3f
 8002118:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800211a:	2b02      	cmp	r3, #2
 800211c:	d121      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	440a      	add	r2, r1
 8002134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fccc 	bl	8005ae6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	461a      	mov	r2, r3
 800215c:	2310      	movs	r3, #16
 800215e:	6093      	str	r3, [r2, #8]
 8002160:	e066      	b.n	8002230 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	333f      	adds	r3, #63	; 0x3f
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d127      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	0151      	lsls	r1, r2, #5
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	440a      	add	r2, r1
 800218c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002190:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002194:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3360      	adds	r3, #96	; 0x60
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	b2d9      	uxtb	r1, r3
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	202c      	movs	r0, #44	; 0x2c
 80021b2:	fb00 f303 	mul.w	r3, r0, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f005 fe4e 	bl	8007e60 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021c4:	e034      	b.n	8002230 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	333f      	adds	r3, #63	; 0x3f
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d12a      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3354      	adds	r3, #84	; 0x54
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2d8      	uxtb	r0, r3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	4602      	mov	r2, r0
 8002212:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	b2d9      	uxtb	r1, r3
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	202c      	movs	r0, #44	; 0x2c
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	4413      	add	r3, r2
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f005 fe18 	bl	8007e60 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d12b      	bne.n	8002290 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3348      	adds	r3, #72	; 0x48
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	202c      	movs	r0, #44	; 0x2c
 800224e:	fb00 f202 	mul.w	r2, r0, r2
 8002252:	440a      	add	r2, r1
 8002254:	3240      	adds	r2, #64	; 0x40
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	fbb3 f3f2 	udiv	r3, r3, r2
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 81be 	beq.w	80025e2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3354      	adds	r3, #84	; 0x54
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3354      	adds	r3, #84	; 0x54
 800228a:	4602      	mov	r2, r0
 800228c:	701a      	strb	r2, [r3, #0]
}
 800228e:	e1a8      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3354      	adds	r3, #84	; 0x54
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2d8      	uxtb	r0, r3
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3354      	adds	r3, #84	; 0x54
 80022b4:	4602      	mov	r2, r0
 80022b6:	701a      	strb	r2, [r3, #0]
}
 80022b8:	e193      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	f040 8106 	bne.w	80024de <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3361      	adds	r3, #97	; 0x61
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d109      	bne.n	800231a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3360      	adds	r3, #96	; 0x60
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e0c9      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3361      	adds	r3, #97	; 0x61
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d109      	bne.n	8002342 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3360      	adds	r3, #96	; 0x60
 800233c:	2205      	movs	r2, #5
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e0b5      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3361      	adds	r3, #97	; 0x61
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d009      	beq.n	800236a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3361      	adds	r3, #97	; 0x61
 8002364:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002366:	2b08      	cmp	r3, #8
 8002368:	d150      	bne.n	800240c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	335c      	adds	r3, #92	; 0x5c
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	202c      	movs	r0, #44	; 0x2c
 8002382:	fb00 f303 	mul.w	r3, r0, r3
 8002386:	440b      	add	r3, r1
 8002388:	335c      	adds	r3, #92	; 0x5c
 800238a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	335c      	adds	r3, #92	; 0x5c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d912      	bls.n	80023c6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	335c      	adds	r3, #92	; 0x5c
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3360      	adds	r3, #96	; 0x60
 80023c0:	2204      	movs	r2, #4
 80023c2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023c4:	e073      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3360      	adds	r3, #96	; 0x60
 80023d4:	2202      	movs	r2, #2
 80023d6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ee:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023f6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800240a:	e050      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3361      	adds	r3, #97	; 0x61
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d122      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002448:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002450:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e023      	b.n	80024ae <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3361      	adds	r3, #97	; 0x61
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d119      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	335c      	adds	r3, #92	; 0x5c
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	202c      	movs	r0, #44	; 0x2c
 8002492:	fb00 f303 	mul.w	r3, r0, r3
 8002496:	440b      	add	r3, r1
 8002498:	335c      	adds	r3, #92	; 0x5c
 800249a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3360      	adds	r3, #96	; 0x60
 80024aa:	2204      	movs	r2, #4
 80024ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	461a      	mov	r2, r3
 80024bc:	2302      	movs	r3, #2
 80024be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	b2d9      	uxtb	r1, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	202c      	movs	r0, #44	; 0x2c
 80024ca:	fb00 f303 	mul.w	r3, r0, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3360      	adds	r3, #96	; 0x60
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f005 fcc2 	bl	8007e60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024dc:	e081      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d176      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	333f      	adds	r3, #63	; 0x3f
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d121      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	335c      	adds	r3, #92	; 0x5c
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	0151      	lsls	r1, r2, #5
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	440a      	add	r2, r1
 8002530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f003 face 	bl	8005ae6 <USB_HC_Halt>
 800254a:	e041      	b.n	80025d0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	333f      	adds	r3, #63	; 0x3f
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	333f      	adds	r3, #63	; 0x3f
 800256e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002570:	2b02      	cmp	r3, #2
 8002572:	d12d      	bne.n	80025d0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	335c      	adds	r3, #92	; 0x5c
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d120      	bne.n	80025d0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	2203      	movs	r2, #3
 800259e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fa8b 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2310      	movs	r3, #16
 80025e0:	6093      	str	r3, [r2, #8]
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b088      	sub	sp, #32
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d119      	bne.n	800264e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2304      	movs	r3, #4
 800262a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	440a      	add	r2, r1
 8002642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800264c:	e3ca      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d13e      	bne.n	80026e2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2320      	movs	r3, #32
 8002674:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	333d      	adds	r3, #61	; 0x3d
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 83ac 	bne.w	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	333d      	adds	r3, #61	; 0x3d
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3360      	adds	r3, #96	; 0x60
 80026ac:	2202      	movs	r2, #2
 80026ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	0151      	lsls	r1, r2, #5
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	440a      	add	r2, r1
 80026c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ca:	f043 0302 	orr.w	r3, r3, #2
 80026ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fa03 	bl	8005ae6 <USB_HC_Halt>
}
 80026e0:	e380      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f8:	d122      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	0151      	lsls	r1, r2, #5
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	440a      	add	r2, r1
 8002710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f003 f9de 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	461a      	mov	r2, r3
 8002738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273c:	6093      	str	r3, [r2, #8]
}
 800273e:	e351      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d150      	bne.n	80027f8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	335c      	adds	r3, #92	; 0x5c
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d111      	bne.n	80027a2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333d      	adds	r3, #61	; 0x3d
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2340      	movs	r3, #64	; 0x40
 80027a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	0151      	lsls	r1, r2, #5
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	440a      	add	r2, r1
 80027b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 f98a 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	2301      	movs	r3, #1
 80027e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	e2f5      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d13c      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	2204      	movs	r2, #4
 800281e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	333d      	adds	r3, #61	; 0x3d
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	440a      	add	r2, r1
 800285a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f003 f939 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	6093      	str	r3, [r2, #8]
}
 8002886:	e2ad      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d12a      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	2308      	movs	r3, #8
 80028ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	0151      	lsls	r1, r2, #5
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	440a      	add	r2, r1
 80028c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f903 	bl	8005ae6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3361      	adds	r3, #97	; 0x61
 80028ee:	2205      	movs	r2, #5
 80028f0:	701a      	strb	r2, [r3, #0]
}
 80028f2:	e277      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b10      	cmp	r3, #16
 8002908:	d150      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3361      	adds	r3, #97	; 0x61
 800292a:	2203      	movs	r2, #3
 800292c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333d      	adds	r3, #61	; 0x3d
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d112      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	333c      	adds	r3, #60	; 0x3c
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	333d      	adds	r3, #61	; 0x3d
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	440a      	add	r2, r1
 800297e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 f8a7 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2310      	movs	r3, #16
 80029a8:	6093      	str	r3, [r2, #8]
}
 80029aa:	e21b      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b80      	cmp	r3, #128	; 0x80
 80029c0:	d174      	bne.n	8002aac <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d121      	bne.n	8002a0e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3361      	adds	r3, #97	; 0x61
 80029d8:	2206      	movs	r2, #6
 80029da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	0151      	lsls	r1, r2, #5
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	440a      	add	r2, r1
 80029f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 f86d 	bl	8005ae6 <USB_HC_Halt>
 8002a0c:	e044      	b.n	8002a98 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	202c      	movs	r0, #44	; 0x2c
 8002a26:	fb00 f303 	mul.w	r3, r0, r3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	335c      	adds	r3, #92	; 0x5c
 8002a2e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d920      	bls.n	8002a86 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	335c      	adds	r3, #92	; 0x5c
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	3360      	adds	r3, #96	; 0x60
 8002a64:	2204      	movs	r2, #4
 8002a66:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	202c      	movs	r0, #44	; 0x2c
 8002a72:	fb00 f303 	mul.w	r3, r0, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f005 f9ee 	bl	8007e60 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a84:	e008      	b.n	8002a98 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3360      	adds	r3, #96	; 0x60
 8002a94:	2202      	movs	r2, #2
 8002a96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	6093      	str	r3, [r2, #8]
}
 8002aaa:	e19b      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d134      	bne.n	8002b2e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	0151      	lsls	r1, r2, #5
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	440a      	add	r2, r1
 8002ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f002 fff9 	bl	8005ae6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	2310      	movs	r3, #16
 8002b04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3361      	adds	r3, #97	; 0x61
 8002b28:	2208      	movs	r2, #8
 8002b2a:	701a      	strb	r2, [r3, #0]
}
 8002b2c:	e15a      	b.n	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	f040 814f 	bne.w	8002de4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	0151      	lsls	r1, r2, #5
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b60:	f023 0302 	bic.w	r3, r3, #2
 8002b64:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3361      	adds	r3, #97	; 0x61
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d17d      	bne.n	8002c76 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3360      	adds	r3, #96	; 0x60
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	333f      	adds	r3, #63	; 0x3f
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d00a      	beq.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	333f      	adds	r3, #63	; 0x3f
 8002bae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	f040 8100 	bne.w	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d113      	bne.n	8002be6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3355      	adds	r3, #85	; 0x55
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3355      	adds	r3, #85	; 0x55
 8002be2:	4602      	mov	r2, r0
 8002be4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 80e3 	bne.w	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	334c      	adds	r3, #76	; 0x4c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80d8 	beq.w	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	334c      	adds	r3, #76	; 0x4c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	202c      	movs	r0, #44	; 0x2c
 8002c1c:	fb00 f202 	mul.w	r2, r0, r2
 8002c20:	440a      	add	r2, r1
 8002c22:	3240      	adds	r2, #64	; 0x40
 8002c24:	8812      	ldrh	r2, [r2, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	202c      	movs	r0, #44	; 0x2c
 8002c30:	fb00 f202 	mul.w	r2, r0, r2
 8002c34:	440a      	add	r2, r1
 8002c36:	3240      	adds	r2, #64	; 0x40
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80b5 	beq.w	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3355      	adds	r3, #85	; 0x55
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2d8      	uxtb	r0, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3355      	adds	r3, #85	; 0x55
 8002c70:	4602      	mov	r2, r0
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e09f      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3361      	adds	r3, #97	; 0x61
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d109      	bne.n	8002c9e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3360      	adds	r3, #96	; 0x60
 8002c98:	2202      	movs	r2, #2
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e08b      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3361      	adds	r3, #97	; 0x61
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d109      	bne.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3360      	adds	r3, #96	; 0x60
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e077      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3361      	adds	r3, #97	; 0x61
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d109      	bne.n	8002cee <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3360      	adds	r3, #96	; 0x60
 8002ce8:	2205      	movs	r2, #5
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e063      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3361      	adds	r3, #97	; 0x61
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d009      	beq.n	8002d16 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	212c      	movs	r1, #44	; 0x2c
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3361      	adds	r3, #97	; 0x61
 8002d10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d14f      	bne.n	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	202c      	movs	r0, #44	; 0x2c
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	440b      	add	r3, r1
 8002d34:	335c      	adds	r3, #92	; 0x5c
 8002d36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	335c      	adds	r3, #92	; 0x5c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d912      	bls.n	8002d72 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	335c      	adds	r3, #92	; 0x5c
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3360      	adds	r3, #96	; 0x60
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e021      	b.n	8002db6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3360      	adds	r3, #96	; 0x60
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	461a      	mov	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	b2d9      	uxtb	r1, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	202c      	movs	r0, #44	; 0x2c
 8002dd2:	fb00 f303 	mul.w	r3, r0, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3360      	adds	r3, #96	; 0x60
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f005 f83e 	bl	8007e60 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	0c5b      	lsrs	r3, r3, #17
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d004      	beq.n	8002e32 <HCD_RXQLVL_IRQHandler+0x46>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	f000 80a9 	beq.w	8002f82 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e30:	e0aa      	b.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a6 	beq.w	8002f86 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3344      	adds	r3, #68	; 0x44
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 809b 	beq.w	8002f86 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3350      	adds	r3, #80	; 0x50
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	441a      	add	r2, r3
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	202c      	movs	r0, #44	; 0x2c
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	440b      	add	r3, r1
 8002e70:	334c      	adds	r3, #76	; 0x4c
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d87a      	bhi.n	8002f6e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3344      	adds	r3, #68	; 0x44
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	f002 f9a1 	bl	80051d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3344      	adds	r3, #68	; 0x44
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	441a      	add	r2, r3
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	202c      	movs	r0, #44	; 0x2c
 8002eb0:	fb00 f303 	mul.w	r3, r0, r3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3344      	adds	r3, #68	; 0x44
 8002eb8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3350      	adds	r3, #80	; 0x50
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	441a      	add	r2, r3
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	202c      	movs	r0, #44	; 0x2c
 8002ed4:	fb00 f303 	mul.w	r3, r0, r3
 8002ed8:	440b      	add	r3, r1
 8002eda:	3350      	adds	r3, #80	; 0x50
 8002edc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	0cdb      	lsrs	r3, r3, #19
 8002eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3340      	adds	r3, #64	; 0x40
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d13c      	bne.n	8002f86 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d039      	beq.n	8002f86 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f28:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f30:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3354      	adds	r3, #84	; 0x54
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f083 0301 	eor.w	r3, r3, #1
 8002f58:	b2d8      	uxtb	r0, r3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3354      	adds	r3, #84	; 0x54
 8002f68:	4602      	mov	r2, r0
 8002f6a:	701a      	strb	r2, [r3, #0]
      break;
 8002f6c:	e00b      	b.n	8002f86 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3360      	adds	r3, #96	; 0x60
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	701a      	strb	r2, [r3, #0]
      break;
 8002f80:	e001      	b.n	8002f86 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f82:	bf00      	nop
 8002f84:	e000      	b.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f86:	bf00      	nop
  }
}
 8002f88:	bf00      	nop
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fbc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d10b      	bne.n	8002fe0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 ff28 	bl	8007e28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f043 0302 	orr.w	r3, r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d132      	bne.n	8003050 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d126      	bne.n	800304a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d113      	bne.n	800302c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800300a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800300e:	d106      	bne.n	800301e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2102      	movs	r1, #2
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fa3e 	bl	8005498 <USB_InitFSLSPClkSel>
 800301c:	e011      	b.n	8003042 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f002 fa37 	bl	8005498 <USB_InitFSLSPClkSel>
 800302a:	e00a      	b.n	8003042 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800303a:	461a      	mov	r2, r3
 800303c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003040:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f004 ff1a 	bl	8007e7c <HAL_HCD_PortEnabled_Callback>
 8003048:	e002      	b.n	8003050 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f004 ff24 	bl	8007e98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b20      	cmp	r3, #32
 8003058:	d103      	bne.n	8003062 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6013      	str	r3, [r2, #0]
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e12b      	b.n	80032e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fcc8 	bl	8000a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030dc:	f001 f9fc 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a81      	ldr	r2, [pc, #516]	; (80032ec <HAL_I2C_Init+0x274>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d807      	bhi.n	80030fc <HAL_I2C_Init+0x84>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a80      	ldr	r2, [pc, #512]	; (80032f0 <HAL_I2C_Init+0x278>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e006      	b.n	800310a <HAL_I2C_Init+0x92>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a7d      	ldr	r2, [pc, #500]	; (80032f4 <HAL_I2C_Init+0x27c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	bf94      	ite	ls
 8003104:	2301      	movls	r3, #1
 8003106:	2300      	movhi	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0e7      	b.n	80032e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <HAL_I2C_Init+0x280>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9b      	lsrs	r3, r3, #18
 800311c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_I2C_Init+0x274>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d802      	bhi.n	800314c <HAL_I2C_Init+0xd4>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	e009      	b.n	8003160 <HAL_I2C_Init+0xe8>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	4a69      	ldr	r2, [pc, #420]	; (80032fc <HAL_I2C_Init+0x284>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	3301      	adds	r3, #1
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	495c      	ldr	r1, [pc, #368]	; (80032ec <HAL_I2C_Init+0x274>)
 800317c:	428b      	cmp	r3, r1
 800317e:	d819      	bhi.n	80031b4 <HAL_I2C_Init+0x13c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e59      	subs	r1, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fbb1 f3f3 	udiv	r3, r1, r3
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003194:	400b      	ands	r3, r1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_I2C_Init+0x138>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e59      	subs	r1, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ae:	e051      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 80031b0:	2304      	movs	r3, #4
 80031b2:	e04f      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d111      	bne.n	80031e0 <HAL_I2C_Init+0x168>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e012      	b.n	8003206 <HAL_I2C_Init+0x18e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e58      	subs	r0, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	0099      	lsls	r1, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Init+0x196>
 800320a:	2301      	movs	r3, #1
 800320c:	e022      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10e      	bne.n	8003234 <HAL_I2C_Init+0x1bc>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e58      	subs	r0, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	440b      	add	r3, r1
 8003224:	fbb0 f3f3 	udiv	r3, r0, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003232:	e00f      	b.n	8003254 <HAL_I2C_Init+0x1dc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	6809      	ldr	r1, [r1, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6911      	ldr	r1, [r2, #16]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68d2      	ldr	r2, [r2, #12]
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	430b      	orrs	r3, r1
 8003296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	000186a0 	.word	0x000186a0
 80032f0:	001e847f 	.word	0x001e847f
 80032f4:	003d08ff 	.word	0x003d08ff
 80032f8:	431bde83 	.word	0x431bde83
 80032fc:	10624dd3 	.word	0x10624dd3

08003300 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e128      	b.n	8003564 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a90      	ldr	r2, [pc, #576]	; (800356c <HAL_I2S_Init+0x26c>)
 800332a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fbc9 	bl	8000ac4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003348:	f023 030f 	bic.w	r3, r3, #15
 800334c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2202      	movs	r2, #2
 8003354:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d060      	beq.n	8003420 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003366:	2310      	movs	r3, #16
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e001      	b.n	8003370 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b20      	cmp	r3, #32
 8003376:	d802      	bhi.n	800337e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800337e:	2001      	movs	r0, #1
 8003380:	f001 f9c2 	bl	8004708 <HAL_RCCEx_GetPeriphCLKFreq>
 8003384:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d125      	bne.n	80033dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	461a      	mov	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	3305      	adds	r3, #5
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e01f      	b.n	80033fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	3305      	adds	r3, #5
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e00e      	b.n	80033fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	3305      	adds	r3, #5
 80033f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <HAL_I2S_Init+0x270>)
 80033fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003402:	08db      	lsrs	r3, r3, #3
 8003404:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e003      	b.n	8003428 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003420:	2302      	movs	r3, #2
 8003422:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d902      	bls.n	8003434 <HAL_I2S_Init+0x134>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2bff      	cmp	r3, #255	; 0xff
 8003432:	d907      	bls.n	8003444 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e08f      	b.n	8003564 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	ea42 0103 	orr.w	r1, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	430a      	orrs	r2, r1
 8003456:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003462:	f023 030f 	bic.w	r3, r3, #15
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6851      	ldr	r1, [r2, #4]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68d2      	ldr	r2, [r2, #12]
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6992      	ldr	r2, [r2, #24]
 800347a:	430a      	orrs	r2, r1
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003486:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d161      	bne.n	8003554 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a38      	ldr	r2, [pc, #224]	; (8003574 <HAL_I2S_Init+0x274>)
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a37      	ldr	r2, [pc, #220]	; (8003578 <HAL_I2S_Init+0x278>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_I2S_Init+0x1a4>
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_I2S_Init+0x27c>)
 80034a2:	e001      	b.n	80034a8 <HAL_I2S_Init+0x1a8>
 80034a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	4932      	ldr	r1, [pc, #200]	; (8003578 <HAL_I2S_Init+0x278>)
 80034b0:	428a      	cmp	r2, r1
 80034b2:	d101      	bne.n	80034b8 <HAL_I2S_Init+0x1b8>
 80034b4:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_I2S_Init+0x27c>)
 80034b6:	e001      	b.n	80034bc <HAL_I2S_Init+0x1bc>
 80034b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c0:	f023 030f 	bic.w	r3, r3, #15
 80034c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <HAL_I2S_Init+0x278>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_I2S_Init+0x1d4>
 80034d0:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_I2S_Init+0x27c>)
 80034d2:	e001      	b.n	80034d8 <HAL_I2S_Init+0x1d8>
 80034d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d8:	2202      	movs	r2, #2
 80034da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a25      	ldr	r2, [pc, #148]	; (8003578 <HAL_I2S_Init+0x278>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_I2S_Init+0x1ea>
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <HAL_I2S_Init+0x27c>)
 80034e8:	e001      	b.n	80034ee <HAL_I2S_Init+0x1ee>
 80034ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fa:	d003      	beq.n	8003504 <HAL_I2S_Init+0x204>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e001      	b.n	8003510 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800351a:	4313      	orrs	r3, r2
 800351c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003524:	4313      	orrs	r3, r2
 8003526:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800352e:	4313      	orrs	r3, r2
 8003530:	b29a      	uxth	r2, r3
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	4313      	orrs	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800353c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <HAL_I2S_Init+0x278>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_I2S_Init+0x24c>
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_I2S_Init+0x27c>)
 800354a:	e001      	b.n	8003550 <HAL_I2S_Init+0x250>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	897a      	ldrh	r2, [r7, #10]
 8003552:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	08003677 	.word	0x08003677
 8003570:	cccccccd 	.word	0xcccccccd
 8003574:	0800378d 	.word	0x0800378d
 8003578:	40003800 	.word	0x40003800
 800357c:	40003400 	.word	0x40003400

08003580 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	881a      	ldrh	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c9a      	adds	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10e      	bne.n	8003610 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003600:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffb8 	bl	8003580 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	b292      	uxth	r2, r2
 800362c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10e      	bne.n	800366e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800365e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff93 	bl	8003594 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b04      	cmp	r3, #4
 8003690:	d13a      	bne.n	8003708 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d109      	bne.n	80036b0 <I2S_IRQHandler+0x3a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d102      	bne.n	80036b0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffb4 	bl	8003618 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d126      	bne.n	8003708 <I2S_IRQHandler+0x92>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d11f      	bne.n	8003708 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff50 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b03      	cmp	r3, #3
 8003712:	d136      	bne.n	8003782 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d109      	bne.n	8003732 <I2S_IRQHandler+0xbc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d102      	bne.n	8003732 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff45 	bl	80035bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d122      	bne.n	8003782 <I2S_IRQHandler+0x10c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d11b      	bne.n	8003782 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003758:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff13 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4aa2      	ldr	r2, [pc, #648]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037a6:	4ba2      	ldr	r3, [pc, #648]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a8:	e001      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a9b      	ldr	r2, [pc, #620]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037c4:	4b9a      	ldr	r3, [pc, #616]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c6:	e001      	b.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d004      	beq.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 8099 	bne.w	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f925 	bl	8003a48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9c8 	bl	8003ba8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d13a      	bne.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d035      	beq.n	8003898 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7e      	ldr	r2, [pc, #504]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003836:	4b7e      	ldr	r3, [pc, #504]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003838:	e001      	b.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800383a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4979      	ldr	r1, [pc, #484]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003846:	428b      	cmp	r3, r1
 8003848:	d101      	bne.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800384a:	4b79      	ldr	r3, [pc, #484]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800384c:	e001      	b.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800384e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003856:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003866:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fe88 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b08      	cmp	r3, #8
 80038a0:	f040 80be 	bne.w	8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80b8 	beq.w	8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a59      	ldr	r2, [pc, #356]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038ca:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038cc:	e001      	b.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4954      	ldr	r1, [pc, #336]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038da:	428b      	cmp	r3, r1
 80038dc:	d101      	bne.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038de:	4b54      	ldr	r3, [pc, #336]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038e0:	e001      	b.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fe4a 	bl	80035a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003914:	e084      	b.n	8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d107      	bne.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8be 	bl	8003aac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8fd 	bl	8003b44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d12f      	bne.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d02a      	beq.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800397a:	e001      	b.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4929      	ldr	r1, [pc, #164]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d101      	bne.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800398e:	e001      	b.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003998:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f043 0202 	orr.w	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fdfa 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d131      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d02c      	beq.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d4:	e001      	b.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4912      	ldr	r1, [pc, #72]	; (8003a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d101      	bne.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e8:	e001      	b.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a02:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f043 0204 	orr.w	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fdc5 	bl	80035a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a1e:	e000      	b.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a20:	bf00      	nop
}
 8003a22:	bf00      	nop
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40003800 	.word	0x40003800
 8003a30:	40003400 	.word	0x40003400

08003a34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c99      	adds	r1, r3, #2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6251      	str	r1, [r2, #36]	; 0x24
 8003a5a:	881a      	ldrh	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ffc9 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c99      	adds	r1, r3, #2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6251      	str	r1, [r2, #36]	; 0x24
 8003abe:	8819      	ldrh	r1, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <I2SEx_TxISR_I2SExt+0x90>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <I2SEx_TxISR_I2SExt+0x22>
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <I2SEx_TxISR_I2SExt+0x94>)
 8003acc:	e001      	b.n	8003ad2 <I2SEx_TxISR_I2SExt+0x26>
 8003ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d121      	bne.n	8003b32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <I2SEx_TxISR_I2SExt+0x90>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <I2SEx_TxISR_I2SExt+0x50>
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <I2SEx_TxISR_I2SExt+0x94>)
 8003afa:	e001      	b.n	8003b00 <I2SEx_TxISR_I2SExt+0x54>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	490d      	ldr	r1, [pc, #52]	; (8003b3c <I2SEx_TxISR_I2SExt+0x90>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d101      	bne.n	8003b10 <I2SEx_TxISR_I2SExt+0x64>
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <I2SEx_TxISR_I2SExt+0x94>)
 8003b0e:	e001      	b.n	8003b14 <I2SEx_TxISR_I2SExt+0x68>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff81 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40003800 	.word	0x40003800
 8003b40:	40003400 	.word	0x40003400

08003b44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68d8      	ldr	r0, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	1c99      	adds	r1, r3, #2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b5c:	b282      	uxth	r2, r0
 8003b5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff4a 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <I2SEx_RxISR_I2SExt+0x90>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <I2SEx_RxISR_I2SExt+0x16>
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <I2SEx_RxISR_I2SExt+0x94>)
 8003bbc:	e001      	b.n	8003bc2 <I2SEx_RxISR_I2SExt+0x1a>
 8003bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc2:	68d8      	ldr	r0, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	1c99      	adds	r1, r3, #2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bce:	b282      	uxth	r2, r0
 8003bd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d121      	bne.n	8003c2e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <I2SEx_RxISR_I2SExt+0x90>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <I2SEx_RxISR_I2SExt+0x50>
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <I2SEx_RxISR_I2SExt+0x94>)
 8003bf6:	e001      	b.n	8003bfc <I2SEx_RxISR_I2SExt+0x54>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	490d      	ldr	r1, [pc, #52]	; (8003c38 <I2SEx_RxISR_I2SExt+0x90>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d101      	bne.n	8003c0c <I2SEx_RxISR_I2SExt+0x64>
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <I2SEx_RxISR_I2SExt+0x94>)
 8003c0a:	e001      	b.n	8003c10 <I2SEx_RxISR_I2SExt+0x68>
 8003c0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c14:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff03 	bl	8003a34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40003800 	.word	0x40003800
 8003c3c:	40003400 	.word	0x40003400

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e264      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d075      	beq.n	8003d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5e:	4ba3      	ldr	r3, [pc, #652]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d00c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4ba0      	ldr	r3, [pc, #640]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d112      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b9d      	ldr	r3, [pc, #628]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c82:	d10b      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	4b99      	ldr	r3, [pc, #612]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d05b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x108>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d157      	bne.n	8003d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e23f      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x74>
 8003ca6:	4b91      	ldr	r3, [pc, #580]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a90      	ldr	r2, [pc, #576]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a8a      	ldr	r2, [pc, #552]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b88      	ldr	r3, [pc, #544]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a87      	ldr	r2, [pc, #540]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	4b84      	ldr	r3, [pc, #528]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a83      	ldr	r2, [pc, #524]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b81      	ldr	r3, [pc, #516]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a80      	ldr	r2, [pc, #512]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd f96e 	bl	8000fd8 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd f96a 	bl	8000fd8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e204      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b76      	ldr	r3, [pc, #472]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xc0>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd f95a 	bl	8000fd8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fd f956 	bl	8000fd8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1f0      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b6c      	ldr	r3, [pc, #432]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0xe8>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b62      	ldr	r3, [pc, #392]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b5c      	ldr	r3, [pc, #368]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1c4      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4952      	ldr	r1, [pc, #328]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e03a      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <HAL_RCC_OscConfig+0x2b0>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd f90f 	bl	8000fd8 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7fd f90b 	bl	8000fd8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1a5      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	4b46      	ldr	r3, [pc, #280]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b43      	ldr	r3, [pc, #268]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4940      	ldr	r1, [pc, #256]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_OscConfig+0x2b0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd f8ee 	bl	8000fd8 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fd f8ea 	bl	8000fd8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e184      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d030      	beq.n	8003e8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e32:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <HAL_RCC_OscConfig+0x2b4>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd f8ce 	bl	8000fd8 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd f8ca 	bl	8000fd8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e164      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x200>
 8003e5e:	e015      	b.n	8003e8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCC_OscConfig+0x2b4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fd f8b7 	bl	8000fd8 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7fd f8b3 	bl	8000fd8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e14d      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a0 	beq.w	8003fda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x2b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d121      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_RCC_OscConfig+0x2b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a07      	ldr	r2, [pc, #28]	; (8003ef8 <HAL_RCC_OscConfig+0x2b8>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee2:	f7fd f879 	bl	8000fd8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee8:	e011      	b.n	8003f0e <HAL_RCC_OscConfig+0x2ce>
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	42470000 	.word	0x42470000
 8003ef4:	42470e80 	.word	0x42470e80
 8003ef8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efc:	f7fd f86c 	bl	8000fd8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e106      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b85      	ldr	r3, [pc, #532]	; (8004124 <HAL_RCC_OscConfig+0x4e4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d106      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2f0>
 8003f22:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a80      	ldr	r2, [pc, #512]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	e01c      	b.n	8003f6a <HAL_RCC_OscConfig+0x32a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCC_OscConfig+0x312>
 8003f38:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a7a      	ldr	r2, [pc, #488]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f3e:	f043 0304 	orr.w	r3, r3, #4
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	4b78      	ldr	r3, [pc, #480]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f50:	e00b      	b.n	8003f6a <HAL_RCC_OscConfig+0x32a>
 8003f52:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a74      	ldr	r2, [pc, #464]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	4a71      	ldr	r2, [pc, #452]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	f023 0304 	bic.w	r3, r3, #4
 8003f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d015      	beq.n	8003f9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fd f831 	bl	8000fd8 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fd f82d 	bl	8000fd8 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0c5      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ee      	beq.n	8003f7a <HAL_RCC_OscConfig+0x33a>
 8003f9c:	e014      	b.n	8003fc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fd f81b 	bl	8000fd8 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd f817 	bl	8000fd8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0af      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	4b5a      	ldr	r3, [pc, #360]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1ee      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fce:	4b56      	ldr	r3, [pc, #344]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a55      	ldr	r2, [pc, #340]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 809b 	beq.w	800411a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fe4:	4b50      	ldr	r3, [pc, #320]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d05c      	beq.n	80040aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d141      	bne.n	800407c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fc ffeb 	bl	8000fd8 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004006:	f7fc ffe7 	bl	8000fd8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e081      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	019b      	lsls	r3, r3, #6
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	4937      	ldr	r1, [pc, #220]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fc ffc0 	bl	8000fd8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405c:	f7fc ffbc 	bl	8000fd8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e056      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x41c>
 800407a:	e04e      	b.n	800411a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x4ec>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fc ffa9 	bl	8000fd8 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408a:	f7fc ffa5 	bl	8000fd8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e03f      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x44a>
 80040a8:	e037      	b.n	800411a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e032      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d028      	beq.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d121      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d11a      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040e6:	4013      	ands	r3, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d111      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d107      	bne.n	8004116 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40007000 	.word	0x40007000
 8004128:	40023800 	.word	0x40023800
 800412c:	42470060 	.word	0x42470060

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0cc      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b68      	ldr	r3, [pc, #416]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90c      	bls.n	800416c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0b8      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004184:	4b59      	ldr	r3, [pc, #356]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a58      	ldr	r2, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800418e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800419c:	4b53      	ldr	r3, [pc, #332]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a52      	ldr	r2, [pc, #328]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	494d      	ldr	r1, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d044      	beq.n	8004250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ce:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d119      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e067      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4934      	ldr	r1, [pc, #208]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fc feda 	bl	8000fd8 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fc fed6 	bl	8000fd8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e04f      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d20c      	bcs.n	8004278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e032      	b.n	80042de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4916      	ldr	r1, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	490e      	ldr	r1, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042b6:	f000 f821 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042ba:	4602      	mov	r2, r0
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	490a      	ldr	r1, [pc, #40]	; (80042f0 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	5ccb      	ldrb	r3, [r1, r3]
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc fe3a 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00
 80042ec:	40023800 	.word	0x40023800
 80042f0:	080084dc 	.word	0x080084dc
 80042f4:	20000000 	.word	0x20000000
 80042f8:	20000004 	.word	0x20000004

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	2300      	movs	r3, #0
 800430e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004314:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d00d      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x40>
 8004320:	2b08      	cmp	r3, #8
 8004322:	f200 80bd 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 800432a:	2b04      	cmp	r3, #4
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x3a>
 800432e:	e0b7      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004332:	60bb      	str	r3, [r7, #8]
       break;
 8004334:	e0b7      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004338:	60bb      	str	r3, [r7, #8]
      break;
 800433a:	e0b4      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b5d      	ldr	r3, [pc, #372]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004346:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d04d      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004352:	4b58      	ldr	r3, [pc, #352]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	ea02 0800 	and.w	r8, r2, r0
 800436a:	ea03 0901 	and.w	r9, r3, r1
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	014b      	lsls	r3, r1, #5
 800437c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004380:	0142      	lsls	r2, r0, #5
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	ebb0 0008 	subs.w	r0, r0, r8
 800438a:	eb61 0109 	sbc.w	r1, r1, r9
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	018b      	lsls	r3, r1, #6
 8004398:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800439c:	0182      	lsls	r2, r0, #6
 800439e:	1a12      	subs	r2, r2, r0
 80043a0:	eb63 0301 	sbc.w	r3, r3, r1
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	00d9      	lsls	r1, r3, #3
 80043ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b2:	00d0      	lsls	r0, r2, #3
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	eb12 0208 	adds.w	r2, r2, r8
 80043bc:	eb43 0309 	adc.w	r3, r3, r9
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0259      	lsls	r1, r3, #9
 80043ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043ce:	0250      	lsls	r0, r2, #9
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f7fb ff02 	bl	80001e8 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e04a      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	ea02 0400 	and.w	r4, r2, r0
 8004406:	ea03 0501 	and.w	r5, r3, r1
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	014b      	lsls	r3, r1, #5
 8004418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800441c:	0142      	lsls	r2, r0, #5
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	1b00      	subs	r0, r0, r4
 8004424:	eb61 0105 	sbc.w	r1, r1, r5
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	018b      	lsls	r3, r1, #6
 8004432:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004436:	0182      	lsls	r2, r0, #6
 8004438:	1a12      	subs	r2, r2, r0
 800443a:	eb63 0301 	sbc.w	r3, r3, r1
 800443e:	f04f 0000 	mov.w	r0, #0
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	00d9      	lsls	r1, r3, #3
 8004448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800444c:	00d0      	lsls	r0, r2, #3
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	1912      	adds	r2, r2, r4
 8004454:	eb45 0303 	adc.w	r3, r5, r3
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	0299      	lsls	r1, r3, #10
 8004462:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004466:	0290      	lsls	r0, r2, #10
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	f7fb feb6 	bl	80001e8 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	3301      	adds	r3, #1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	60bb      	str	r3, [r7, #8]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044a2:	60bb      	str	r3, [r7, #8]
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	68bb      	ldr	r3, [r7, #8]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000000 	.word	0x20000000

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	080084ec 	.word	0x080084ec

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0b5b      	lsrs	r3, r3, #13
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	080084ec 	.word	0x080084ec

08004528 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800454c:	2b00      	cmp	r3, #0
 800454e:	d038      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004550:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004556:	f7fc fd3f 	bl	8000fd8 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800455e:	f7fc fd3b 	bl	8000fd8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0bd      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	019b      	lsls	r3, r3, #6
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	495a      	ldr	r1, [pc, #360]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004596:	4b57      	ldr	r3, [pc, #348]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800459c:	f7fc fd1c 	bl	8000fd8 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045a4:	f7fc fd18 	bl	8000fd8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e09a      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b6:	4b50      	ldr	r3, [pc, #320]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8083 	beq.w	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	4b48      	ldr	r3, [pc, #288]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	4a47      	ldr	r2, [pc, #284]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6413      	str	r3, [r2, #64]	; 0x40
 80045e0:	4b45      	ldr	r3, [pc, #276]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a42      	ldr	r2, [pc, #264]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045f8:	f7fc fcee 	bl	8000fd8 <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fc fcea 	bl	8000fd8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e06c      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004612:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800461e:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004626:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02f      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d028      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800463c:	4b2e      	ldr	r3, [pc, #184]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004644:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004646:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800464c:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004652:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d114      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004664:	f7fc fcb8 	bl	8000fd8 <HAL_GetTick>
 8004668:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466a:	e00a      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fc fcb4 	bl	8000fd8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e034      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ee      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469a:	d10d      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	4911      	ldr	r1, [pc, #68]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
 80046b6:	e005      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a0e      	ldr	r2, [pc, #56]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046c2:	6093      	str	r3, [r2, #8]
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	4909      	ldr	r1, [pc, #36]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7d1a      	ldrb	r2, [r3, #20]
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80046e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	42470068 	.word	0x42470068
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000
 8004700:	42470e40 	.word	0x42470e40
 8004704:	424711e0 	.word	0x424711e0

08004708 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d140      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d131      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800473c:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800473e:	617b      	str	r3, [r7, #20]
          break;
 8004740:	e031      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800474e:	d109      	bne.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	e008      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477c:	099b      	lsrs	r3, r3, #6
 800477e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004790:	0f1b      	lsrs	r3, r3, #28
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
          break;
 800479e:	e002      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
          break;
 80047a4:	bf00      	nop
        }
      }
      break;
 80047a6:	bf00      	nop
    }
  }
  return frequency;
 80047a8:	697b      	ldr	r3, [r7, #20]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	00bb8000 	.word	0x00bb8000
 80047c0:	007a1200 	.word	0x007a1200
 80047c4:	00f42400 	.word	0x00f42400

080047c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07b      	b.n	80048d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d009      	beq.n	8004800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	61da      	str	r2, [r3, #28]
 80047f2:	e005      	b.n	8004800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc fa20 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004836:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	ea42 0103 	orr.w	r1, r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0104 	and.w	r1, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	f003 0210 	and.w	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e033      	b.n	8004954 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fc f9f5 	bl	8000cf0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f90a 	bl	8004b28 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004932:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004942:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d17c      	bne.n	8004a72 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <HAL_USART_Transmit+0x28>
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e075      	b.n	8004a74 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_USART_Transmit+0x3a>
 8004992:	2302      	movs	r3, #2
 8004994:	e06e      	b.n	8004a74 <HAL_USART_Transmit+0x118>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2212      	movs	r2, #18
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ac:	f7fc fb14 	bl	8000fd8 <HAL_GetTick>
 80049b0:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c6:	d108      	bne.n	80049da <HAL_USART_Transmit+0x7e>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
 80049d8:	e003      	b.n	80049e2 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80049e2:	e02a      	b.n	8004a3a <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f844 	bl	8004a7c <USART_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e03a      	b.n	8004a74 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a12:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	3302      	adds	r3, #2
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e007      	b.n	8004a2c <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1cf      	bne.n	80049e4 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f814 	bl	8004a7c <USART_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00a      	b.n	8004a74 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004a8c:	e038      	b.n	8004b00 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d034      	beq.n	8004b00 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <USART_WaitOnFlagUntilTimeout+0x30>
 8004a9c:	f7fc fa9c 	bl	8000fd8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d229      	bcs.n	8004b00 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aba:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0220 	bic.w	r2, r2, #32
 8004aca:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ada:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e00f      	b.n	8004b20 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d0b7      	beq.n	8004a8e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	b0a5      	sub	sp, #148	; 0x94
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  uint32_t tmpreg = 0x00U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	f021 030c 	bic.w	r3, r1, #12
 8004b4c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8004b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8004b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b6a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b70:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004b72:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8004b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004b82:	431a      	orrs	r2, r3
 8004b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8004b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b9c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004bb2:	f023 030c 	bic.w	r3, r3, #12
 8004bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8004bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6959      	ldr	r1, [r3, #20]
 8004bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8004bfc:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4bc8      	ldr	r3, [pc, #800]	; (8004f28 <USART_SetConfig+0x400>)
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d006      	beq.n	8004c18 <USART_SetConfig+0xf0>
 8004c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4bc6      	ldr	r3, [pc, #792]	; (8004f2c <USART_SetConfig+0x404>)
 8004c12:	429a      	cmp	r2, r3
 8004c14:	f040 80c1 	bne.w	8004d9a <USART_SetConfig+0x272>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7ff fc72 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c24:	461c      	mov	r4, r3
 8004c26:	f04f 0500 	mov.w	r5, #0
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c32:	415b      	adcs	r3, r3
 8004c34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c3a:	1912      	adds	r2, r2, r4
 8004c3c:	eb45 0303 	adc.w	r3, r5, r3
 8004c40:	f04f 0000 	mov.w	r0, #0
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	00d9      	lsls	r1, r3, #3
 8004c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c4e:	00d0      	lsls	r0, r2, #3
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	eb12 0a04 	adds.w	sl, r2, r4
 8004c58:	eb43 0b05 	adc.w	fp, r3, r5
 8004c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	1891      	adds	r1, r2, r2
 8004c6a:	6539      	str	r1, [r7, #80]	; 0x50
 8004c6c:	415b      	adcs	r3, r3
 8004c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c74:	4650      	mov	r0, sl
 8004c76:	4659      	mov	r1, fp
 8004c78:	f7fb fab6 	bl	80001e8 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4bab      	ldr	r3, [pc, #684]	; (8004f30 <USART_SetConfig+0x408>)
 8004c82:	fba3 2302 	umull	r2, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	011e      	lsls	r6, r3, #4
 8004c8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c8e:	461c      	mov	r4, r3
 8004c90:	f04f 0500 	mov.w	r5, #0
 8004c94:	4622      	mov	r2, r4
 8004c96:	462b      	mov	r3, r5
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ca4:	1912      	adds	r2, r2, r4
 8004ca6:	eb45 0303 	adc.w	r3, r5, r3
 8004caa:	f04f 0000 	mov.w	r0, #0
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	00d9      	lsls	r1, r3, #3
 8004cb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb8:	00d0      	lsls	r0, r2, #3
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	1911      	adds	r1, r2, r4
 8004cc0:	67b9      	str	r1, [r7, #120]	; 0x78
 8004cc2:	416b      	adcs	r3, r5
 8004cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	1891      	adds	r1, r2, r2
 8004cd4:	6439      	str	r1, [r7, #64]	; 0x40
 8004cd6:	415b      	adcs	r3, r3
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cde:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004ce2:	f7fb fa81 	bl	80001e8 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4b91      	ldr	r3, [pc, #580]	; (8004f30 <USART_SetConfig+0x408>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	; 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	3332      	adds	r3, #50	; 0x32
 8004cfe:	4a8c      	ldr	r2, [pc, #560]	; (8004f30 <USART_SetConfig+0x408>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d0c:	441e      	add	r6, r3
 8004d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d12:	4618      	mov	r0, r3
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	1894      	adds	r4, r2, r2
 8004d1e:	63bc      	str	r4, [r7, #56]	; 0x38
 8004d20:	415b      	adcs	r3, r3
 8004d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d28:	1812      	adds	r2, r2, r0
 8004d2a:	eb41 0303 	adc.w	r3, r1, r3
 8004d2e:	f04f 0400 	mov.w	r4, #0
 8004d32:	f04f 0500 	mov.w	r5, #0
 8004d36:	00dd      	lsls	r5, r3, #3
 8004d38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d3c:	00d4      	lsls	r4, r2, #3
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	1814      	adds	r4, r2, r0
 8004d44:	673c      	str	r4, [r7, #112]	; 0x70
 8004d46:	414b      	adcs	r3, r1
 8004d48:	677b      	str	r3, [r7, #116]	; 0x74
 8004d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	461a      	mov	r2, r3
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	1891      	adds	r1, r2, r2
 8004d58:	6339      	str	r1, [r7, #48]	; 0x30
 8004d5a:	415b      	adcs	r3, r3
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d62:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004d66:	f7fb fa3f 	bl	80001e8 <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4b70      	ldr	r3, [pc, #448]	; (8004f30 <USART_SetConfig+0x408>)
 8004d70:	fba3 1302 	umull	r1, r3, r3, r2
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	2164      	movs	r1, #100	; 0x64
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	3332      	adds	r3, #50	; 0x32
 8004d82:	4a6b      	ldr	r2, [pc, #428]	; (8004f30 <USART_SetConfig+0x408>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	f003 0207 	and.w	r2, r3, #7
 8004d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4432      	add	r2, r6
 8004d96:	609a      	str	r2, [r3, #8]
 8004d98:	e0c0      	b.n	8004f1c <USART_SetConfig+0x3f4>
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d9a:	f7ff fb9d 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8004d9e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8004da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da6:	461c      	mov	r4, r3
 8004da8:	f04f 0500 	mov.w	r5, #0
 8004dac:	4622      	mov	r2, r4
 8004dae:	462b      	mov	r3, r5
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004db4:	415b      	adcs	r3, r3
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dbc:	1912      	adds	r2, r2, r4
 8004dbe:	eb45 0303 	adc.w	r3, r5, r3
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	00d9      	lsls	r1, r3, #3
 8004dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd0:	00d0      	lsls	r0, r2, #3
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	eb12 0804 	adds.w	r8, r2, r4
 8004dda:	eb43 0905 	adc.w	r9, r3, r5
 8004dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	461a      	mov	r2, r3
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	1891      	adds	r1, r2, r2
 8004dec:	6239      	str	r1, [r7, #32]
 8004dee:	415b      	adcs	r3, r3
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
 8004df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004df6:	4640      	mov	r0, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	f7fb f9f5 	bl	80001e8 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b4b      	ldr	r3, [pc, #300]	; (8004f30 <USART_SetConfig+0x408>)
 8004e04:	fba3 2302 	umull	r2, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	011e      	lsls	r6, r3, #4
 8004e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e10:	461c      	mov	r4, r3
 8004e12:	f04f 0500 	mov.w	r5, #0
 8004e16:	4622      	mov	r2, r4
 8004e18:	462b      	mov	r3, r5
 8004e1a:	1891      	adds	r1, r2, r2
 8004e1c:	61b9      	str	r1, [r7, #24]
 8004e1e:	415b      	adcs	r3, r3
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e26:	1912      	adds	r2, r2, r4
 8004e28:	eb45 0303 	adc.w	r3, r5, r3
 8004e2c:	f04f 0000 	mov.w	r0, #0
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	00d9      	lsls	r1, r3, #3
 8004e36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e3a:	00d0      	lsls	r0, r2, #3
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	1911      	adds	r1, r2, r4
 8004e42:	66b9      	str	r1, [r7, #104]	; 0x68
 8004e44:	416b      	adcs	r3, r5
 8004e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	6139      	str	r1, [r7, #16]
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e64:	f7fb f9c0 	bl	80001e8 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <USART_SetConfig+0x408>)
 8004e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	2164      	movs	r1, #100	; 0x64
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	3332      	adds	r3, #50	; 0x32
 8004e80:	4a2b      	ldr	r2, [pc, #172]	; (8004f30 <USART_SetConfig+0x408>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e8e:	441e      	add	r6, r3
 8004e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e94:	4618      	mov	r0, r3
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	1894      	adds	r4, r2, r2
 8004ea0:	60bc      	str	r4, [r7, #8]
 8004ea2:	415b      	adcs	r3, r3
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eaa:	1812      	adds	r2, r2, r0
 8004eac:	eb41 0303 	adc.w	r3, r1, r3
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	f04f 0500 	mov.w	r5, #0
 8004eb8:	00dd      	lsls	r5, r3, #3
 8004eba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ebe:	00d4      	lsls	r4, r2, #3
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	1814      	adds	r4, r2, r0
 8004ec6:	663c      	str	r4, [r7, #96]	; 0x60
 8004ec8:	414b      	adcs	r3, r1
 8004eca:	667b      	str	r3, [r7, #100]	; 0x64
 8004ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	6039      	str	r1, [r7, #0]
 8004edc:	415b      	adcs	r3, r3
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ee8:	f7fb f97e 	bl	80001e8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <USART_SetConfig+0x408>)
 8004ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2164      	movs	r1, #100	; 0x64
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	3332      	adds	r3, #50	; 0x32
 8004f04:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <USART_SetConfig+0x408>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f003 0207 	and.w	r2, r3, #7
 8004f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4432      	add	r2, r6
 8004f18:	609a      	str	r2, [r3, #8]
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3794      	adds	r7, #148	; 0x94
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop
 8004f28:	40011000 	.word	0x40011000
 8004f2c:	40011400 	.word	0x40011400
 8004f30:	51eb851f 	.word	0x51eb851f

08004f34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f34:	b084      	sub	sp, #16
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	f107 001c 	add.w	r0, r7, #28
 8004f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d122      	bne.n	8004f92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a0 	bl	80052cc <USB_CoreReset>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e01a      	b.n	8004fc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f994 	bl	80052cc <USB_CoreReset>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8004fba:	e005      	b.n	8004fc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10b      	bne.n	8004fe6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f043 0206 	orr.w	r2, r3, #6
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff2:	b004      	add	sp, #16
 8004ff4:	4770      	bx	lr

08004ff6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f043 0201 	orr.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 0201 	bic.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d115      	bne.n	8005088 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005068:	2001      	movs	r0, #1
 800506a:	f7fb ffc1 	bl	8000ff0 <HAL_Delay>
      ms++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f91a 	bl	80052ae <USB_GetMode>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d01e      	beq.n	80050be <USB_SetCurrentMode+0x84>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b31      	cmp	r3, #49	; 0x31
 8005084:	d9f0      	bls.n	8005068 <USB_SetCurrentMode+0x2e>
 8005086:	e01a      	b.n	80050be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d115      	bne.n	80050ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800509a:	2001      	movs	r0, #1
 800509c:	f7fb ffa8 	bl	8000ff0 <HAL_Delay>
      ms++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f901 	bl	80052ae <USB_GetMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <USB_SetCurrentMode+0x84>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b31      	cmp	r3, #49	; 0x31
 80050b6:	d9f0      	bls.n	800509a <USB_SetCurrentMode+0x60>
 80050b8:	e001      	b.n	80050be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e005      	b.n	80050ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b32      	cmp	r3, #50	; 0x32
 80050c2:	d101      	bne.n	80050c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	f043 0220 	orr.w	r2, r3, #32
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	4a08      	ldr	r2, [pc, #32]	; (8005118 <USB_FlushTxFifo+0x44>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e006      	b.n	800510c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d0f1      	beq.n	80050ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	00030d40 	.word	0x00030d40

0800511c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2210      	movs	r2, #16
 800512c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <USB_FlushRxFifo+0x3c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e006      	b.n	800514c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b10      	cmp	r3, #16
 8005148:	d0f1      	beq.n	800512e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	00030d40 	.word	0x00030d40

0800515c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800515c:	b480      	push	{r7}
 800515e:	b089      	sub	sp, #36	; 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4611      	mov	r1, r2
 8005168:	461a      	mov	r2, r3
 800516a:	460b      	mov	r3, r1
 800516c:	71fb      	strb	r3, [r7, #7]
 800516e:	4613      	mov	r3, r2
 8005170:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800517a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d123      	bne.n	80051ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005182:	88bb      	ldrh	r3, [r7, #4]
 8005184:	3303      	adds	r3, #3
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e018      	b.n	80051c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	031a      	lsls	r2, r3, #12
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519c:	461a      	mov	r2, r3
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	3301      	adds	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	3301      	adds	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3e2      	bcc.n	8005190 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3724      	adds	r7, #36	; 0x24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051d8:	b480      	push	{r7}
 80051da:	b08b      	sub	sp, #44	; 0x2c
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	e014      	b.n	800522e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	3301      	adds	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	3301      	adds	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	3301      	adds	r3, #1
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	3301      	adds	r3, #1
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3301      	adds	r3, #1
 800522c:	623b      	str	r3, [r7, #32]
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	429a      	cmp	r2, r3
 8005234:	d3e6      	bcc.n	8005204 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005236:	8bfb      	ldrh	r3, [r7, #30]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01e      	beq.n	800527a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005246:	461a      	mov	r2, r3
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	701a      	strb	r2, [r3, #0]
      i++;
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	3301      	adds	r3, #1
 8005266:	623b      	str	r3, [r7, #32]
      pDest++;
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	3301      	adds	r3, #1
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800526e:	8bfb      	ldrh	r3, [r7, #30]
 8005270:	3b01      	subs	r3, #1
 8005272:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005274:	8bfb      	ldrh	r3, [r7, #30]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1ea      	bne.n	8005250 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800527c:	4618      	mov	r0, r3
 800527e:	372c      	adds	r7, #44	; 0x2c
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052a0:	68fb      	ldr	r3, [r7, #12]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0301 	and.w	r3, r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	4a13      	ldr	r2, [pc, #76]	; (800532c <USB_CoreReset+0x60>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e01a      	b.n	800531e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	daf3      	bge.n	80052d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	4a09      	ldr	r2, [pc, #36]	; (800532c <USB_CoreReset+0x60>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e006      	b.n	800531e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d0f1      	beq.n	8005300 <USB_CoreReset+0x34>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	00030d40 	.word	0x00030d40

08005330 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005330:	b084      	sub	sp, #16
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	f107 001c 	add.w	r0, r7, #28
 800533e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800534c:	461a      	mov	r2, r3
 800534e:	2300      	movs	r3, #0
 8005350:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d018      	beq.n	80053b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10a      	bne.n	800539e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005396:	f043 0304 	orr.w	r3, r3, #4
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e014      	b.n	80053c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053ac:	f023 0304 	bic.w	r3, r3, #4
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e009      	b.n	80053c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053c2:	f023 0304 	bic.w	r3, r3, #4
 80053c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80053c8:	2110      	movs	r1, #16
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff fe82 	bl	80050d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fea3 	bl	800511c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e015      	b.n	8005408 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	461a      	mov	r2, r3
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	461a      	mov	r2, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d3e5      	bcc.n	80053dc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f04f 32ff 	mov.w	r2, #4294967295
 800541c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a13      	ldr	r2, [pc, #76]	; (8005484 <USB_HostInit+0x154>)
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a13      	ldr	r2, [pc, #76]	; (8005488 <USB_HostInit+0x158>)
 800543c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005440:	e009      	b.n	8005456 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2280      	movs	r2, #128	; 0x80
 8005446:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a10      	ldr	r2, [pc, #64]	; (800548c <USB_HostInit+0x15c>)
 800544c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <USB_HostInit+0x160>)
 8005452:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f043 0210 	orr.w	r2, r3, #16
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	4b09      	ldr	r3, [pc, #36]	; (8005494 <USB_HostInit+0x164>)
 800546e:	4313      	orrs	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005480:	b004      	add	sp, #16
 8005482:	4770      	bx	lr
 8005484:	01000200 	.word	0x01000200
 8005488:	00e00300 	.word	0x00e00300
 800548c:	00600080 	.word	0x00600080
 8005490:	004000e0 	.word	0x004000e0
 8005494:	a3200008 	.word	0xa3200008

08005498 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d107      	bne.n	80054ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e0:	461a      	mov	r2, r3
 80054e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054e6:	6053      	str	r3, [r2, #4]
 80054e8:	e009      	b.n	80054fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d106      	bne.n	80054fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f6:	461a      	mov	r2, r3
 80054f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80054fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800552c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800553c:	2064      	movs	r0, #100	; 0x64
 800553e:	f7fb fd57 	bl	8000ff0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800554a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005550:	200a      	movs	r0, #10
 8005552:	f7fb fd4d 	bl	8000ff0 <HAL_Delay>

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005584:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <USB_DriveVbus+0x44>
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d106      	bne.n	80055a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800559e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d109      	bne.n	80055c4 <USB_DriveVbus+0x64>
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	0c5b      	lsrs	r3, r3, #17
 80055f0:	f003 0303 	and.w	r3, r3, #3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	b29b      	uxth	r3, r3
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	70fb      	strb	r3, [r7, #3]
 8005636:	460b      	mov	r3, r1
 8005638:	70bb      	strb	r3, [r7, #2]
 800563a:	4613      	mov	r3, r2
 800563c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005652:	461a      	mov	r2, r3
 8005654:	f04f 33ff 	mov.w	r3, #4294967295
 8005658:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800565a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800565e:	2b03      	cmp	r3, #3
 8005660:	d87e      	bhi.n	8005760 <USB_HC_Init+0x13c>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <USB_HC_Init+0x44>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	08005679 	.word	0x08005679
 800566c:	08005723 	.word	0x08005723
 8005670:	08005679 	.word	0x08005679
 8005674:	080056e5 	.word	0x080056e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005684:	461a      	mov	r2, r3
 8005686:	f240 439d 	movw	r3, #1181	; 0x49d
 800568a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800568c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	da10      	bge.n	80056b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80056b4:	e057      	b.n	8005766 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d051      	beq.n	8005766 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056e0:	60d3      	str	r3, [r2, #12]
      break;
 80056e2:	e040      	b.n	8005766 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f0:	461a      	mov	r2, r3
 80056f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80056f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	da34      	bge.n	800576a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	440a      	add	r2, r1
 8005716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005720:	e023      	b.n	800576a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	f240 2325 	movw	r3, #549	; 0x225
 8005734:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005736:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da17      	bge.n	800576e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	440a      	add	r2, r1
 8005754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005758:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800575c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800575e:	e006      	b.n	800576e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77fb      	strb	r3, [r7, #31]
      break;
 8005764:	e004      	b.n	8005770 <USB_HC_Init+0x14c>
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <USB_HC_Init+0x14c>
      break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <USB_HC_Init+0x14c>
      break;
 800576e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	2101      	movs	r1, #1
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	6939      	ldr	r1, [r7, #16]
 8005786:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800578a:	4313      	orrs	r3, r2
 800578c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800579a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da03      	bge.n	80057aa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e001      	b.n	80057ae <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff0f 	bl	80055d2 <USB_GetHostSpeed>
 80057b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d106      	bne.n	80057cc <USB_HC_Init+0x1a8>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d003      	beq.n	80057cc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e001      	b.n	80057d0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057d0:	787b      	ldrb	r3, [r7, #1]
 80057d2:	059b      	lsls	r3, r3, #22
 80057d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057d8:	78bb      	ldrb	r3, [r7, #2]
 80057da:	02db      	lsls	r3, r3, #11
 80057dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057e6:	049b      	lsls	r3, r3, #18
 80057e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	0159      	lsls	r1, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	440b      	add	r3, r1
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800580c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800580e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005812:	2b03      	cmp	r3, #3
 8005814:	d10f      	bne.n	8005836 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	440a      	add	r2, r1
 800582c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005830:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005834:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005836:	7ffb      	ldrb	r3, [r7, #31]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800585c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d02d      	beq.n	80058c6 <USB_HC_StartXfer+0x86>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	791b      	ldrb	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d129      	bne.n	80058c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d117      	bne.n	80058a8 <USB_HC_StartXfer+0x68>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	79db      	ldrb	r3, [r3, #7]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <USB_HC_StartXfer+0x48>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	79db      	ldrb	r3, [r3, #7]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d10f      	bne.n	80058a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	440a      	add	r2, r1
 800589e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <USB_HC_StartXfer+0x86>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	795b      	ldrb	r3, [r3, #5]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d107      	bne.n	80058c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fa2f 	bl	8005d20 <USB_DoPing>
      return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e0f8      	b.n	8005ab8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d018      	beq.n	8005900 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	8912      	ldrh	r2, [r2, #8]
 80058d6:	4413      	add	r3, r2
 80058d8:	3b01      	subs	r3, #1
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	8912      	ldrh	r2, [r2, #8]
 80058de:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058e6:	8b7b      	ldrh	r3, [r7, #26]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d90b      	bls.n	8005904 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80058ec:	8b7b      	ldrh	r3, [r7, #26]
 80058ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	8912      	ldrh	r2, [r2, #8]
 80058f6:	fb02 f203 	mul.w	r2, r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	611a      	str	r2, [r3, #16]
 80058fe:	e001      	b.n	8005904 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005900:	2301      	movs	r3, #1
 8005902:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	78db      	ldrb	r3, [r3, #3]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800590c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	8912      	ldrh	r2, [r2, #8]
 8005912:	fb02 f203 	mul.w	r2, r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	611a      	str	r2, [r3, #16]
 800591a:	e003      	b.n	8005924 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800592c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800592e:	04d9      	lsls	r1, r3, #19
 8005930:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <USB_HC_StartXfer+0x280>)
 8005932:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005934:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	7a9b      	ldrb	r3, [r3, #10]
 800593a:	075b      	lsls	r3, r3, #29
 800593c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005940:	69f9      	ldr	r1, [r7, #28]
 8005942:	0148      	lsls	r0, r1, #5
 8005944:	6a39      	ldr	r1, [r7, #32]
 8005946:	4401      	add	r1, r0
 8005948:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800594c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800594e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	68d9      	ldr	r1, [r3, #12]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	460a      	mov	r2, r1
 8005968:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	bf0c      	ite	eq
 800597a:	2301      	moveq	r3, #1
 800597c:	2300      	movne	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	6a3a      	ldr	r2, [r7, #32]
 8005996:	440a      	add	r2, r1
 8005998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	7e7b      	ldrb	r3, [r7, #25]
 80059b2:	075b      	lsls	r3, r3, #29
 80059b4:	69f9      	ldr	r1, [r7, #28]
 80059b6:	0148      	lsls	r0, r1, #5
 80059b8:	6a39      	ldr	r1, [r7, #32]
 80059ba:	4401      	add	r1, r0
 80059bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	e003      	b.n	80059f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e04e      	b.n	8005ab8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	78db      	ldrb	r3, [r3, #3]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d149      	bne.n	8005ab6 <USB_HC_StartXfer+0x276>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d045      	beq.n	8005ab6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	79db      	ldrb	r3, [r3, #7]
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d830      	bhi.n	8005a94 <USB_HC_StartXfer+0x254>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <USB_HC_StartXfer+0x1f8>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a6d 	.word	0x08005a6d
 8005a40:	08005a49 	.word	0x08005a49
 8005a44:	08005a6d 	.word	0x08005a6d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	3303      	adds	r3, #3
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a52:	8afa      	ldrh	r2, [r7, #22]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d91c      	bls.n	8005a98 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a6a:	e015      	b.n	8005a98 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	3303      	adds	r3, #3
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a76:	8afa      	ldrh	r2, [r7, #22]
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d90a      	bls.n	8005a9c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a92:	e003      	b.n	8005a9c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a94:	bf00      	nop
 8005a96:	e002      	b.n	8005a9e <USB_HC_StartXfer+0x25e>
        break;
 8005a98:	bf00      	nop
 8005a9a:	e000      	b.n	8005a9e <USB_HC_StartXfer+0x25e>
        break;
 8005a9c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	68d9      	ldr	r1, [r3, #12]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785a      	ldrb	r2, [r3, #1]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2000      	movs	r0, #0
 8005aae:	9000      	str	r0, [sp, #0]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fb53 	bl	800515c <USB_WritePacket>
  }

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3728      	adds	r7, #40	; 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	1ff80000 	.word	0x1ff80000

08005ac4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	b29b      	uxth	r3, r3
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b089      	sub	sp, #36	; 0x24
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	0c9b      	lsrs	r3, r3, #18
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	0fdb      	lsrs	r3, r3, #31
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d104      	bne.n	8005b40 <USB_HC_Halt+0x5a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e0e8      	b.n	8005d12 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <USB_HC_Halt+0x66>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d173      	bne.n	8005c34 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b6a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f040 80cb 	bne.w	8005d10 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d143      	bne.n	8005c0e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	3301      	adds	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bf2:	d81d      	bhi.n	8005c30 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0a:	d0ec      	beq.n	8005be6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c0c:	e080      	b.n	8005d10 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c2e:	e06f      	b.n	8005d10 <USB_HC_Halt+0x22a>
            break;
 8005c30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c32:	e06d      	b.n	8005d10 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d143      	bne.n	8005cec <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cc2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cd0:	d81d      	bhi.n	8005d0e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce8:	d0ec      	beq.n	8005cc4 <USB_HC_Halt+0x1de>
 8005cea:	e011      	b.n	8005d10 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	e000      	b.n	8005d10 <USB_HC_Halt+0x22a>
          break;
 8005d0e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3724      	adds	r7, #36	; 0x24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	04da      	lsls	r2, r3, #19
 8005d3c:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <USB_DoPing+0x74>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	1ff80000 	.word	0x1ff80000

08005d98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff f935 	bl	8005018 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005dae:	2110      	movs	r1, #16
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff f98f 	bl	80050d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff f9b0 	bl	800511c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e01f      	b.n	8005e02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005de0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005de8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	461a      	mov	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d9dc      	bls.n	8005dc2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e034      	b.n	8005e78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e54:	d80c      	bhi.n	8005e70 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d0ec      	beq.n	8005e48 <USB_StopHost+0xb0>
 8005e6e:	e000      	b.n	8005e72 <USB_StopHost+0xda>
        break;
 8005e70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b0f      	cmp	r3, #15
 8005e7c:	d9c7      	bls.n	8005e0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e84:	461a      	mov	r2, r3
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff f8ae 	bl	8004ff6 <USB_EnableGlobalInt>

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af04      	add	r7, sp, #16
 8005eaa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005eac:	2301      	movs	r3, #1
 8005eae:	2202      	movs	r2, #2
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fc66 	bl	8006784 <USBH_FindInterface>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d002      	beq.n	8005ec8 <USBH_CDC_InterfaceInit+0x24>
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d901      	bls.n	8005ecc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e13d      	b.n	8006148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fc3b 	bl	800674c <USBH_SelectInterface>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e131      	b.n	8006148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005eea:	2050      	movs	r0, #80	; 0x50
 8005eec:	f002 fa00 	bl	80082f0 <malloc>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f04:	2302      	movs	r3, #2
 8005f06:	e11f      	b.n	8006148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f08:	2250      	movs	r2, #80	; 0x50
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	68b8      	ldr	r0, [r7, #8]
 8005f0e:	f002 f9ff 	bl	8008310 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	211a      	movs	r1, #26
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da15      	bge.n	8005f56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	211a      	movs	r1, #26
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	211a      	movs	r1, #26
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f50:	881a      	ldrh	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 fe32 	bl	8007bc6 <USBH_AllocPipe>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	7858      	ldrb	r0, [r3, #1]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	8952      	ldrh	r2, [r2, #10]
 8005f82:	9202      	str	r2, [sp, #8]
 8005f84:	2203      	movs	r2, #3
 8005f86:	9201      	str	r2, [sp, #4]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4623      	mov	r3, r4
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fdea 	bl	8007b68 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f002 f8f9 	bl	8008194 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	210a      	movs	r1, #10
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fbeb 	bl	8006784 <USBH_FindInterface>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2bff      	cmp	r3, #255	; 0xff
 8005fb6:	d002      	beq.n	8005fbe <USBH_CDC_InterfaceInit+0x11a>
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d901      	bls.n	8005fc2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0c2      	b.n	8006148 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	211a      	movs	r1, #26
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	4413      	add	r3, r2
 8005fce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da16      	bge.n	8006008 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	211a      	movs	r1, #26
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fea:	781a      	ldrb	r2, [r3, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	211a      	movs	r1, #26
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006000:	881a      	ldrh	r2, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	835a      	strh	r2, [r3, #26]
 8006006:	e015      	b.n	8006034 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	211a      	movs	r1, #26
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	211a      	movs	r1, #26
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	4413      	add	r3, r2
 800602a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800602e:	881a      	ldrh	r2, [r3, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	211a      	movs	r1, #26
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	4413      	add	r3, r2
 8006040:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b25b      	sxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	da16      	bge.n	800607a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	211a      	movs	r1, #26
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	f203 3356 	addw	r3, r3, #854	; 0x356
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	211a      	movs	r1, #26
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	4413      	add	r3, r2
 800606e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006072:	881a      	ldrh	r2, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	835a      	strh	r2, [r3, #26]
 8006078:	e015      	b.n	80060a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	211a      	movs	r1, #26
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	f203 3356 	addw	r3, r3, #854	; 0x356
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	211a      	movs	r1, #26
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	4413      	add	r3, r2
 800609c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	7b9b      	ldrb	r3, [r3, #14]
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fd8a 	bl	8007bc6 <USBH_AllocPipe>
 80060b2:	4603      	mov	r3, r0
 80060b4:	461a      	mov	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	7bdb      	ldrb	r3, [r3, #15]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fd80 	bl	8007bc6 <USBH_AllocPipe>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	7b59      	ldrb	r1, [r3, #13]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	7b98      	ldrb	r0, [r3, #14]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	8b12      	ldrh	r2, [r2, #24]
 80060e6:	9202      	str	r2, [sp, #8]
 80060e8:	2202      	movs	r2, #2
 80060ea:	9201      	str	r2, [sp, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	4623      	mov	r3, r4
 80060f0:	4602      	mov	r2, r0
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fd38 	bl	8007b68 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	7b19      	ldrb	r1, [r3, #12]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	7bd8      	ldrb	r0, [r3, #15]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	8b52      	ldrh	r2, [r2, #26]
 8006110:	9202      	str	r2, [sp, #8]
 8006112:	2202      	movs	r2, #2
 8006114:	9201      	str	r2, [sp, #4]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4623      	mov	r3, r4
 800611a:	4602      	mov	r2, r0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fd23 	bl	8007b68 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	7b5b      	ldrb	r3, [r3, #13]
 800612e:	2200      	movs	r2, #0
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f002 f82e 	bl	8008194 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f002 f827 	bl	8008194 <USBH_LL_SetToggle>

  return USBH_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	bd90      	pop	{r4, r7, pc}

08006150 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00e      	beq.n	8006188 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fd18 	bl	8007ba6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fd43 	bl	8007c08 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	7b1b      	ldrb	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00e      	beq.n	80061ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	7b1b      	ldrb	r3, [r3, #12]
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fd05 	bl	8007ba6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	7b1b      	ldrb	r3, [r3, #12]
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fd30 	bl	8007c08 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	7b5b      	ldrb	r3, [r3, #13]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00e      	beq.n	80061d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	7b5b      	ldrb	r3, [r3, #13]
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fcf2 	bl	8007ba6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	7b5b      	ldrb	r3, [r3, #13]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fd1d 	bl	8007c08 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f002 f889 	bl	8008300 <free>
    phost->pActiveClass->pData = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f4:	2200      	movs	r2, #0
 80061f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3340      	adds	r3, #64	; 0x40
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8b1 	bl	8006382 <GetLineCoding>
 8006220:	4603      	mov	r3, r0
 8006222:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006230:	2102      	movs	r1, #2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006236:	7afb      	ldrb	r3, [r7, #11]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006260:	2b04      	cmp	r3, #4
 8006262:	d877      	bhi.n	8006354 <USBH_CDC_Process+0x114>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <USBH_CDC_Process+0x2c>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	08006281 	.word	0x08006281
 8006270:	08006287 	.word	0x08006287
 8006274:	080062b7 	.word	0x080062b7
 8006278:	0800632b 	.word	0x0800632b
 800627c:	08006339 	.word	0x08006339
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	e06d      	b.n	8006362 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f897 	bl	80063c0 <SetLineCoding>
 8006292:	4603      	mov	r3, r0
 8006294:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062a4:	e058      	b.n	8006358 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d055      	beq.n	8006358 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2204      	movs	r2, #4
 80062b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062b4:	e050      	b.n	8006358 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	3340      	adds	r3, #64	; 0x40
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f860 	bl	8006382 <GetLineCoding>
 80062c2:	4603      	mov	r3, r0
 80062c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d126      	bne.n	800631a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	791b      	ldrb	r3, [r3, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d13b      	bne.n	800635c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d133      	bne.n	800635c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006300:	429a      	cmp	r2, r3
 8006302:	d12b      	bne.n	800635c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800630e:	429a      	cmp	r2, r3
 8006310:	d124      	bne.n	800635c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f958 	bl	80065c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006318:	e020      	b.n	800635c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d01d      	beq.n	800635c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2204      	movs	r2, #4
 8006324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006328:	e018      	b.n	800635c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f867 	bl	80063fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f8da 	bl	80064ea <CDC_ProcessReception>
      break;
 8006336:	e014      	b.n	8006362 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006338:	2100      	movs	r1, #0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 ffe3 	bl	8007306 <USBH_ClrFeature>
 8006340:	4603      	mov	r3, r0
 8006342:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006352:	e005      	b.n	8006360 <USBH_CDC_Process+0x120>

    default:
      break;
 8006354:	bf00      	nop
 8006356:	e004      	b.n	8006362 <USBH_CDC_Process+0x122>
      break;
 8006358:	bf00      	nop
 800635a:	e002      	b.n	8006362 <USBH_CDC_Process+0x122>
      break;
 800635c:	bf00      	nop
 800635e:	e000      	b.n	8006362 <USBH_CDC_Process+0x122>
      break;
 8006360:	bf00      	nop

  }

  return status;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	22a1      	movs	r2, #161	; 0xa1
 8006390:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2221      	movs	r2, #33	; 0x21
 8006396:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2207      	movs	r2, #7
 80063a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2207      	movs	r2, #7
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f988 	bl	80076c6 <USBH_CtlReq>
 80063b6:	4603      	mov	r3, r0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2221      	movs	r2, #33	; 0x21
 80063ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2207      	movs	r2, #7
 80063e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2207      	movs	r2, #7
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f969 	bl	80076c6 <USBH_CtlReq>
 80063f4:	4603      	mov	r3, r0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af02      	add	r7, sp, #8
 8006404:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006410:	2300      	movs	r3, #0
 8006412:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800641a:	2b01      	cmp	r3, #1
 800641c:	d002      	beq.n	8006424 <CDC_ProcessTransmission+0x26>
 800641e:	2b02      	cmp	r3, #2
 8006420:	d023      	beq.n	800646a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006422:	e05e      	b.n	80064e2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	8b12      	ldrh	r2, [r2, #24]
 800642c:	4293      	cmp	r3, r2
 800642e:	d90b      	bls.n	8006448 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8b1a      	ldrh	r2, [r3, #24]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	7b5b      	ldrb	r3, [r3, #13]
 800643c:	2001      	movs	r0, #1
 800643e:	9000      	str	r0, [sp, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fb4e 	bl	8007ae2 <USBH_BulkSendData>
 8006446:	e00b      	b.n	8006460 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	7b5b      	ldrb	r3, [r3, #13]
 8006456:	2001      	movs	r0, #1
 8006458:	9000      	str	r0, [sp, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fb41 	bl	8007ae2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006468:	e03b      	b.n	80064e2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	7b5b      	ldrb	r3, [r3, #13]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fe65 	bl	8008140 <USBH_LL_GetURBState>
 8006476:	4603      	mov	r3, r0
 8006478:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d128      	bne.n	80064d2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	8b12      	ldrh	r2, [r2, #24]
 8006488:	4293      	cmp	r3, r2
 800648a:	d90e      	bls.n	80064aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	8b12      	ldrh	r2, [r2, #24]
 8006494:	1a9a      	subs	r2, r3, r2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	8b12      	ldrh	r2, [r2, #24]
 80064a2:	441a      	add	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	61da      	str	r2, [r3, #28]
 80064a8:	e002      	b.n	80064b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064c0:	e00e      	b.n	80064e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f868 	bl	80065a0 <USBH_CDC_TransmitCallback>
      break;
 80064d0:	e006      	b.n	80064e0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80064d2:	7afb      	ldrb	r3, [r7, #11]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d103      	bne.n	80064e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064e0:	bf00      	nop
  }
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006506:	2b03      	cmp	r3, #3
 8006508:	d002      	beq.n	8006510 <CDC_ProcessReception+0x26>
 800650a:	2b04      	cmp	r3, #4
 800650c:	d00e      	beq.n	800652c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800650e:	e043      	b.n	8006598 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6a19      	ldr	r1, [r3, #32]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	8b5a      	ldrh	r2, [r3, #26]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	7b1b      	ldrb	r3, [r3, #12]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fb05 	bl	8007b2c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2204      	movs	r2, #4
 8006526:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800652a:	e035      	b.n	8006598 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	7b1b      	ldrb	r3, [r3, #12]
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fe04 	bl	8008140 <USBH_LL_GetURBState>
 8006538:	4603      	mov	r3, r0
 800653a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d129      	bne.n	8006596 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	7b1b      	ldrb	r3, [r3, #12]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fd67 	bl	800801c <USBH_LL_GetLastXferSize>
 800654e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	429a      	cmp	r2, r3
 8006558:	d016      	beq.n	8006588 <CDC_ProcessReception+0x9e>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	8b5b      	ldrh	r3, [r3, #26]
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4293      	cmp	r3, r2
 8006564:	d910      	bls.n	8006588 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad2      	subs	r2, r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	6a1a      	ldr	r2, [r3, #32]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	441a      	add	r2, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2203      	movs	r2, #3
 8006582:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006586:	e006      	b.n	8006596 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f80f 	bl	80065b4 <USBH_CDC_ReceiveCallback>
      break;
 8006596:	bf00      	nop
  }
}
 8006598:	bf00      	nop
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80065f0:	2302      	movs	r3, #2
 80065f2:	e029      	b.n	8006648 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	79fa      	ldrb	r2, [r7, #7]
 80065f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f81f 	bl	8006650 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 fc37 	bl	8007eb4 <USBH_LL_Init>

  return USBH_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e009      	b.n	8006676 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	33e0      	adds	r3, #224	; 0xe0
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b0e      	cmp	r3, #14
 800667a:	d9f2      	bls.n	8006662 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e009      	b.n	8006696 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d3f1      	bcc.n	8006682 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2240      	movs	r2, #64	; 0x40
 80066c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d016      	beq.n	800673a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10e      	bne.n	8006734 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800671c:	1c59      	adds	r1, r3, #1
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	33de      	adds	r3, #222	; 0xde
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
 8006732:	e004      	b.n	800673e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006734:	2302      	movs	r3, #2
 8006736:	73fb      	strb	r3, [r7, #15]
 8006738:	e001      	b.n	800673e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800673a:	2302      	movs	r3, #2
 800673c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	429a      	cmp	r2, r3
 8006766:	d204      	bcs.n	8006772 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006770:	e001      	b.n	8006776 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006772:	2302      	movs	r3, #2
 8006774:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	4603      	mov	r3, r0
 8006794:	70fb      	strb	r3, [r7, #3]
 8006796:	460b      	mov	r3, r1
 8006798:	70bb      	strb	r3, [r7, #2]
 800679a:	4613      	mov	r3, r2
 800679c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80067ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067ae:	e025      	b.n	80067fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	221a      	movs	r2, #26
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	3308      	adds	r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	3302      	adds	r3, #2
 80067c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	795b      	ldrb	r3, [r3, #5]
 80067c6:	78fa      	ldrb	r2, [r7, #3]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d002      	beq.n	80067d2 <USBH_FindInterface+0x4e>
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	2bff      	cmp	r3, #255	; 0xff
 80067d0:	d111      	bne.n	80067f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80067d6:	78ba      	ldrb	r2, [r7, #2]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d002      	beq.n	80067e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067dc:	78bb      	ldrb	r3, [r7, #2]
 80067de:	2bff      	cmp	r3, #255	; 0xff
 80067e0:	d109      	bne.n	80067f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067e6:	787a      	ldrb	r2, [r7, #1]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d002      	beq.n	80067f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067ec:	787b      	ldrb	r3, [r7, #1]
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	d101      	bne.n	80067f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	e006      	b.n	8006804 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	3301      	adds	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d9d6      	bls.n	80067b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006802:	23ff      	movs	r3, #255	; 0xff
}
 8006804:	4618      	mov	r0, r3
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fb87 	bl	8007f2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800681e:	2101      	movs	r1, #1
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fca0 	bl	8008166 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af04      	add	r7, sp, #16
 8006836:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006838:	2302      	movs	r3, #2
 800683a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d102      	bne.n	8006852 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2203      	movs	r2, #3
 8006850:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b0b      	cmp	r3, #11
 800685a:	f200 81b3 	bhi.w	8006bc4 <USBH_Process+0x394>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <USBH_Process+0x34>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	08006895 	.word	0x08006895
 8006868:	080068c7 	.word	0x080068c7
 800686c:	0800692f 	.word	0x0800692f
 8006870:	08006b5f 	.word	0x08006b5f
 8006874:	08006bc5 	.word	0x08006bc5
 8006878:	080069d3 	.word	0x080069d3
 800687c:	08006b05 	.word	0x08006b05
 8006880:	08006a09 	.word	0x08006a09
 8006884:	08006a29 	.word	0x08006a29
 8006888:	08006a49 	.word	0x08006a49
 800688c:	08006a77 	.word	0x08006a77
 8006890:	08006b47 	.word	0x08006b47
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8193 	beq.w	8006bc8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80068a8:	20c8      	movs	r0, #200	; 0xc8
 80068aa:	f001 fca3 	bl	80081f4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fb99 	bl	8007fe6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80068c4:	e180      	b.n	8006bc8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d107      	bne.n	80068e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80068de:	e182      	b.n	8006be6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ea:	d914      	bls.n	8006916 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068f2:	3301      	adds	r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006902:	2b03      	cmp	r3, #3
 8006904:	d903      	bls.n	800690e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	220d      	movs	r2, #13
 800690a:	701a      	strb	r2, [r3, #0]
      break;
 800690c:	e16b      	b.n	8006be6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
      break;
 8006914:	e167      	b.n	8006be6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800691c:	f103 020a 	add.w	r2, r3, #10
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006926:	200a      	movs	r0, #10
 8006928:	f001 fc64 	bl	80081f4 <USBH_Delay>
      break;
 800692c:	e15b      	b.n	8006be6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800693e:	2104      	movs	r1, #4
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006944:	2064      	movs	r0, #100	; 0x64
 8006946:	f001 fc55 	bl	80081f4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fb24 	bl	8007f98 <USBH_LL_GetSpeed>
 8006950:	4603      	mov	r3, r0
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2205      	movs	r2, #5
 800695e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006960:	2100      	movs	r1, #0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f92f 	bl	8007bc6 <USBH_AllocPipe>
 8006968:	4603      	mov	r3, r0
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f927 	bl	8007bc6 <USBH_AllocPipe>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7919      	ldrb	r1, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006994:	b292      	uxth	r2, r2
 8006996:	9202      	str	r2, [sp, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	9201      	str	r2, [sp, #4]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	4603      	mov	r3, r0
 80069a0:	2280      	movs	r2, #128	; 0x80
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 f8e0 	bl	8007b68 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	7959      	ldrb	r1, [r3, #5]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80069bc:	b292      	uxth	r2, r2
 80069be:	9202      	str	r2, [sp, #8]
 80069c0:	2200      	movs	r2, #0
 80069c2:	9201      	str	r2, [sp, #4]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4603      	mov	r3, r0
 80069c8:	2200      	movs	r2, #0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f8cc 	bl	8007b68 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069d0:	e109      	b.n	8006be6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f90c 	bl	8006bf0 <USBH_HandleEnum>
 80069d8:	4603      	mov	r3, r0
 80069da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 80f3 	bne.w	8006bcc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d103      	bne.n	8006a00 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2208      	movs	r2, #8
 80069fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069fe:	e0e5      	b.n	8006bcc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2207      	movs	r2, #7
 8006a04:	701a      	strb	r2, [r3, #0]
      break;
 8006a06:	e0e1      	b.n	8006bcc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 80de 	beq.w	8006bd0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2208      	movs	r2, #8
 8006a24:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a26:	e0d3      	b.n	8006bd0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fc20 	bl	8007278 <USBH_SetCfg>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 80ca 	bne.w	8006bd4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2209      	movs	r2, #9
 8006a44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a46:	e0c5      	b.n	8006bd4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006a56:	2101      	movs	r1, #1
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fc30 	bl	80072be <USBH_SetFeature>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 80b9 	bne.w	8006bd8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	220a      	movs	r2, #10
 8006a6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a6c:	e0b4      	b.n	8006bd8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	220a      	movs	r2, #10
 8006a72:	701a      	strb	r2, [r3, #0]
      break;
 8006a74:	e0b0      	b.n	8006bd8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80ad 	beq.w	8006bdc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e016      	b.n	8006abe <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a90:	7bfa      	ldrb	r2, [r7, #15]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	32de      	adds	r2, #222	; 0xde
 8006a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9a:	791a      	ldrb	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d108      	bne.n	8006ab8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	32de      	adds	r2, #222	; 0xde
 8006aac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006ab6:	e005      	b.n	8006ac4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	3301      	adds	r3, #1
 8006abc:	73fb      	strb	r3, [r7, #15]
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0e5      	beq.n	8006a90 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2206      	movs	r2, #6
 8006ae4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aec:	2103      	movs	r1, #3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006af2:	e073      	b.n	8006bdc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	220d      	movs	r2, #13
 8006af8:	701a      	strb	r2, [r3, #0]
      break;
 8006afa:	e06f      	b.n	8006bdc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	220d      	movs	r2, #13
 8006b00:	701a      	strb	r2, [r3, #0]
      break;
 8006b02:	e06b      	b.n	8006bdc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	220b      	movs	r2, #11
 8006b2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b2c:	e058      	b.n	8006be0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d154      	bne.n	8006be0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	220d      	movs	r2, #13
 8006b3a:	701a      	strb	r2, [r3, #0]
      break;
 8006b3c:	e050      	b.n	8006be0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	220d      	movs	r2, #13
 8006b42:	701a      	strb	r2, [r3, #0]
      break;
 8006b44:	e04c      	b.n	8006be0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d049      	beq.n	8006be4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
      }
      break;
 8006b5c:	e042      	b.n	8006be4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fd72 	bl	8006650 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b9a:	2105      	movs	r1, #5
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d107      	bne.n	8006bbc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fe2b 	bl	8006810 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bba:	e014      	b.n	8006be6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f9b5 	bl	8007f2c <USBH_LL_Start>
      break;
 8006bc2:	e010      	b.n	8006be6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e00e      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006bc8:	bf00      	nop
 8006bca:	e00c      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006bcc:	bf00      	nop
 8006bce:	e00a      	b.n	8006be6 <USBH_Process+0x3b6>
    break;
 8006bd0:	bf00      	nop
 8006bd2:	e008      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006bd4:	bf00      	nop
 8006bd6:	e006      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006bd8:	bf00      	nop
 8006bda:	e004      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006bdc:	bf00      	nop
 8006bde:	e002      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006be0:	bf00      	nop
 8006be2:	e000      	b.n	8006be6 <USBH_Process+0x3b6>
      break;
 8006be4:	bf00      	nop
  }
  return USBH_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b07      	cmp	r3, #7
 8006c06:	f200 81c1 	bhi.w	8006f8c <USBH_HandleEnum+0x39c>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <USBH_HandleEnum+0x20>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c31 	.word	0x08006c31
 8006c14:	08006cef 	.word	0x08006cef
 8006c18:	08006d59 	.word	0x08006d59
 8006c1c:	08006de7 	.word	0x08006de7
 8006c20:	08006e51 	.word	0x08006e51
 8006c24:	08006ec1 	.word	0x08006ec1
 8006c28:	08006f07 	.word	0x08006f07
 8006c2c:	08006f4d 	.word	0x08006f4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006c30:	2108      	movs	r1, #8
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa50 	bl	80070d8 <USBH_Get_DevDesc>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d130      	bne.n	8006ca4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	7919      	ldrb	r1, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c66:	b292      	uxth	r2, r2
 8006c68:	9202      	str	r2, [sp, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	9201      	str	r2, [sp, #4]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4603      	mov	r3, r0
 8006c72:	2280      	movs	r2, #128	; 0x80
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 ff77 	bl	8007b68 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7959      	ldrb	r1, [r3, #5]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c8e:	b292      	uxth	r2, r2
 8006c90:	9202      	str	r2, [sp, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 ff63 	bl	8007b68 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006ca2:	e175      	b.n	8006f90 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f040 8172 	bne.w	8006f90 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d903      	bls.n	8006cce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	220d      	movs	r2, #13
 8006cca:	701a      	strb	r2, [r3, #0]
      break;
 8006ccc:	e160      	b.n	8006f90 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	795b      	ldrb	r3, [r3, #5]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 ff97 	bl	8007c08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	791b      	ldrb	r3, [r3, #4]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 ff91 	bl	8007c08 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
      break;
 8006cec:	e150      	b.n	8006f90 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006cee:	2112      	movs	r1, #18
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f9f1 	bl	80070d8 <USBH_Get_DevDesc>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d06:	e145      	b.n	8006f94 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f040 8142 	bne.w	8006f94 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d903      	bls.n	8006d32 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	220d      	movs	r2, #13
 8006d2e:	701a      	strb	r2, [r3, #0]
      break;
 8006d30:	e130      	b.n	8006f94 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	795b      	ldrb	r3, [r3, #5]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ff65 	bl	8007c08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	791b      	ldrb	r3, [r3, #4]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 ff5f 	bl	8007c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
      break;
 8006d56:	e11d      	b.n	8006f94 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d58:	2101      	movs	r1, #1
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa68 	bl	8007230 <USBH_SetAddress>
 8006d60:	4603      	mov	r3, r0
 8006d62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d132      	bne.n	8006dd0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d6a:	2002      	movs	r0, #2
 8006d6c:	f001 fa42 	bl	80081f4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7919      	ldrb	r1, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d92:	b292      	uxth	r2, r2
 8006d94:	9202      	str	r2, [sp, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	9201      	str	r2, [sp, #4]
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2280      	movs	r2, #128	; 0x80
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fee1 	bl	8007b68 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7959      	ldrb	r1, [r3, #5]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	9202      	str	r2, [sp, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	9201      	str	r2, [sp, #4]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fecd 	bl	8007b68 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006dce:	e0e3      	b.n	8006f98 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	f040 80e0 	bne.w	8006f98 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	220d      	movs	r2, #13
 8006ddc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	705a      	strb	r2, [r3, #1]
      break;
 8006de4:	e0d8      	b.n	8006f98 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006de6:	2109      	movs	r1, #9
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f99d 	bl	8007128 <USBH_Get_CfgDesc>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dfe:	e0cd      	b.n	8006f9c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	f040 80ca 	bne.w	8006f9c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d903      	bls.n	8006e2a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	220d      	movs	r2, #13
 8006e26:	701a      	strb	r2, [r3, #0]
      break;
 8006e28:	e0b8      	b.n	8006f9c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	795b      	ldrb	r3, [r3, #5]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fee9 	bl	8007c08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fee3 	bl	8007c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
      break;
 8006e4e:	e0a5      	b.n	8006f9c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f965 	bl	8007128 <USBH_Get_CfgDesc>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e6e:	e097      	b.n	8006fa0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	f040 8094 	bne.w	8006fa0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e7e:	3301      	adds	r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d903      	bls.n	8006e9a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	220d      	movs	r2, #13
 8006e96:	701a      	strb	r2, [r3, #0]
      break;
 8006e98:	e082      	b.n	8006fa0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	795b      	ldrb	r3, [r3, #5]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 feb1 	bl	8007c08 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 feab 	bl	8007c08 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
      break;
 8006ebe:	e06f      	b.n	8006fa0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d019      	beq.n	8006efe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006ed6:	23ff      	movs	r3, #255	; 0xff
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f949 	bl	8007170 <USBH_Get_StringDesc>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d103      	bne.n	8006ef0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2206      	movs	r2, #6
 8006eec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006eee:	e059      	b.n	8006fa4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d156      	bne.n	8006fa4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2206      	movs	r2, #6
 8006efa:	705a      	strb	r2, [r3, #1]
      break;
 8006efc:	e052      	b.n	8006fa4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2206      	movs	r2, #6
 8006f02:	705a      	strb	r2, [r3, #1]
      break;
 8006f04:	e04e      	b.n	8006fa4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d019      	beq.n	8006f44 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f1c:	23ff      	movs	r3, #255	; 0xff
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f926 	bl	8007170 <USBH_Get_StringDesc>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d103      	bne.n	8006f36 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2207      	movs	r2, #7
 8006f32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f34:	e038      	b.n	8006fa8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d135      	bne.n	8006fa8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2207      	movs	r2, #7
 8006f40:	705a      	strb	r2, [r3, #1]
      break;
 8006f42:	e031      	b.n	8006fa8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2207      	movs	r2, #7
 8006f48:	705a      	strb	r2, [r3, #1]
      break;
 8006f4a:	e02d      	b.n	8006fa8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d017      	beq.n	8006f86 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f62:	23ff      	movs	r3, #255	; 0xff
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f903 	bl	8007170 <USBH_Get_StringDesc>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f78:	e018      	b.n	8006fac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d115      	bne.n	8006fac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
      break;
 8006f84:	e012      	b.n	8006fac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8a:	e00f      	b.n	8006fac <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f8c:	bf00      	nop
 8006f8e:	e00e      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006f90:	bf00      	nop
 8006f92:	e00c      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006f94:	bf00      	nop
 8006f96:	e00a      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006f98:	bf00      	nop
 8006f9a:	e008      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006f9c:	bf00      	nop
 8006f9e:	e006      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006fa0:	bf00      	nop
 8006fa2:	e004      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006fa4:	bf00      	nop
 8006fa6:	e002      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <USBH_HandleEnum+0x3be>
      break;
 8006fac:	bf00      	nop
  }
  return Status;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f804 	bl	8006ffa <USBH_HandleSof>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b0b      	cmp	r3, #11
 800700a:	d10a      	bne.n	8007022 <USBH_HandleSof+0x28>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
  }
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800703a:	bf00      	nop
}
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007056:	bf00      	nop
}
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 ff56 	bl	8007f62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fda3 	bl	8007c08 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	795b      	ldrb	r3, [r3, #5]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fd9d 	bl	8007c08 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af02      	add	r7, sp, #8
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	4613      	mov	r3, r2
 80070f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f6:	2100      	movs	r1, #0
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f864 	bl	80071c6 <USBH_GetDescriptor>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	b292      	uxth	r2, r2
 8007118:	4619      	mov	r1, r3
 800711a:	f000 f918 	bl	800734e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af02      	add	r7, sp, #8
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	331c      	adds	r3, #28
 8007138:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800713a:	887b      	ldrh	r3, [r7, #2]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f83d 	bl	80071c6 <USBH_GetDescriptor>
 800714c:	4603      	mov	r3, r0
 800714e:	72fb      	strb	r3, [r7, #11]
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d107      	bne.n	8007166 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800715c:	887a      	ldrh	r2, [r7, #2]
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 f964 	bl	800742e <USBH_ParseCfgDesc>
  }

  return status;
 8007166:	7afb      	ldrb	r3, [r7, #11]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	461a      	mov	r2, r3
 800717c:	460b      	mov	r3, r1
 800717e:	72fb      	strb	r3, [r7, #11]
 8007180:	4613      	mov	r3, r2
 8007182:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800718c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007194:	893b      	ldrh	r3, [r7, #8]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	460b      	mov	r3, r1
 800719a:	2100      	movs	r1, #0
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f812 	bl	80071c6 <USBH_GetDescriptor>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d107      	bne.n	80071bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071b2:	893a      	ldrh	r2, [r7, #8]
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fa37 	bl	800762a <USBH_ParseStringDesc>
  }

  return status;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	72fb      	strb	r3, [r7, #11]
 80071d4:	4613      	mov	r3, r2
 80071d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	789b      	ldrb	r3, [r3, #2]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d11c      	bne.n	800721a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2206      	movs	r2, #6
 80071f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	893a      	ldrh	r2, [r7, #8]
 80071f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071f8:	893b      	ldrh	r3, [r7, #8]
 80071fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007202:	d104      	bne.n	800720e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f240 4209 	movw	r2, #1033	; 0x409
 800720a:	829a      	strh	r2, [r3, #20]
 800720c:	e002      	b.n	8007214 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8b3a      	ldrh	r2, [r7, #24]
 8007218:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800721a:	8b3b      	ldrh	r3, [r7, #24]
 800721c:	461a      	mov	r2, r3
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fa50 	bl	80076c6 <USBH_CtlReq>
 8007226:	4603      	mov	r3, r0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	789b      	ldrb	r3, [r3, #2]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10f      	bne.n	8007264 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2205      	movs	r2, #5
 800724e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fa2c 	bl	80076c6 <USBH_CtlReq>
 800726e:	4603      	mov	r3, r0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	789b      	ldrb	r3, [r3, #2]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d10e      	bne.n	80072aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2209      	movs	r2, #9
 8007296:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	887a      	ldrh	r2, [r7, #2]
 800729c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072aa:	2200      	movs	r2, #0
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa09 	bl	80076c6 <USBH_CtlReq>
 80072b4:	4603      	mov	r3, r0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	789b      	ldrb	r3, [r3, #2]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10f      	bne.n	80072f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2203      	movs	r2, #3
 80072dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072f2:	2200      	movs	r2, #0
 80072f4:	2100      	movs	r1, #0
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9e5 	bl	80076c6 <USBH_CtlReq>
 80072fc:	4603      	mov	r3, r0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	789b      	ldrb	r3, [r3, #2]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10f      	bne.n	800733a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2202      	movs	r2, #2
 800731e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9c1 	bl	80076c6 <USBH_CtlReq>
 8007344:	4603      	mov	r3, r0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	4613      	mov	r3, r2
 800735a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	781a      	ldrb	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	785a      	ldrb	r2, [r3, #1]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	3302      	adds	r3, #2
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b29a      	uxth	r2, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3303      	adds	r3, #3
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	b29b      	uxth	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	791a      	ldrb	r2, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	795a      	ldrb	r2, [r3, #5]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	799a      	ldrb	r2, [r3, #6]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	79da      	ldrb	r2, [r3, #7]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	2b08      	cmp	r3, #8
 80073ac:	d939      	bls.n	8007422 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3308      	adds	r3, #8
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	3309      	adds	r3, #9
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	4313      	orrs	r3, r2
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	330a      	adds	r3, #10
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	330b      	adds	r3, #11
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	330c      	adds	r3, #12
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	330d      	adds	r3, #13
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	7b9a      	ldrb	r2, [r3, #14]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	7bda      	ldrb	r2, [r3, #15]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	7c1a      	ldrb	r2, [r3, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	7c5a      	ldrb	r2, [r3, #17]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	745a      	strb	r2, [r3, #17]
  }
}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08a      	sub	sp, #40	; 0x28
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	785a      	ldrb	r2, [r3, #1]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3302      	adds	r3, #2
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b29a      	uxth	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3303      	adds	r3, #3
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b29b      	uxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	791a      	ldrb	r2, [r3, #4]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	795a      	ldrb	r2, [r3, #5]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	799a      	ldrb	r2, [r3, #6]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	79da      	ldrb	r2, [r3, #7]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	7a1a      	ldrb	r2, [r3, #8]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d95f      	bls.n	800756a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80074aa:	2309      	movs	r3, #9
 80074ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074b2:	e051      	b.n	8007558 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074b4:	f107 0316 	add.w	r3, r7, #22
 80074b8:	4619      	mov	r1, r3
 80074ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074bc:	f000 f8e8 	bl	8007690 <USBH_GetNextDesc>
 80074c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d146      	bne.n	8007558 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80074ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ce:	221a      	movs	r2, #26
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	3308      	adds	r3, #8
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	3302      	adds	r3, #2
 80074dc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e0:	69f8      	ldr	r0, [r7, #28]
 80074e2:	f000 f846 	bl	8007572 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074f0:	e022      	b.n	8007538 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074f2:	f107 0316 	add.w	r3, r7, #22
 80074f6:	4619      	mov	r1, r3
 80074f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074fa:	f000 f8c9 	bl	8007690 <USBH_GetNextDesc>
 80074fe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	2b05      	cmp	r3, #5
 8007506:	d117      	bne.n	8007538 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800750c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007510:	3201      	adds	r2, #1
 8007512:	00d2      	lsls	r2, r2, #3
 8007514:	211a      	movs	r1, #26
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	3308      	adds	r3, #8
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007528:	69b8      	ldr	r0, [r7, #24]
 800752a:	f000 f851 	bl	80075d0 <USBH_ParseEPDesc>
            ep_ix++;
 800752e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007532:	3301      	adds	r3, #1
 8007534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	791b      	ldrb	r3, [r3, #4]
 800753c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007540:	429a      	cmp	r2, r3
 8007542:	d204      	bcs.n	800754e <USBH_ParseCfgDesc+0x120>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	885a      	ldrh	r2, [r3, #2]
 8007548:	8afb      	ldrh	r3, [r7, #22]
 800754a:	429a      	cmp	r2, r3
 800754c:	d8d1      	bhi.n	80074f2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800754e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007552:	3301      	adds	r3, #1
 8007554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800755c:	2b01      	cmp	r3, #1
 800755e:	d804      	bhi.n	800756a <USBH_ParseCfgDesc+0x13c>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	885a      	ldrh	r2, [r3, #2]
 8007564:	8afb      	ldrh	r3, [r7, #22]
 8007566:	429a      	cmp	r2, r3
 8007568:	d8a4      	bhi.n	80074b4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800756a:	bf00      	nop
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	785a      	ldrb	r2, [r3, #1]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	789a      	ldrb	r2, [r3, #2]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	78da      	ldrb	r2, [r3, #3]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	791a      	ldrb	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	795a      	ldrb	r2, [r3, #5]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	799a      	ldrb	r2, [r3, #6]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	79da      	ldrb	r2, [r3, #7]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	7a1a      	ldrb	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	721a      	strb	r2, [r3, #8]
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	785a      	ldrb	r2, [r3, #1]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	789a      	ldrb	r2, [r3, #2]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	78da      	ldrb	r2, [r3, #3]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	3304      	adds	r3, #4
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	b29a      	uxth	r2, r3
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	3305      	adds	r3, #5
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	b29b      	uxth	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b29a      	uxth	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	799a      	ldrb	r2, [r3, #6]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	719a      	strb	r2, [r3, #6]
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	4613      	mov	r3, r2
 8007636:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d120      	bne.n	8007684 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	1e9a      	subs	r2, r3, #2
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	4293      	cmp	r3, r2
 800764c:	bf28      	it	cs
 800764e:	4613      	movcs	r3, r2
 8007650:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3302      	adds	r3, #2
 8007656:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007658:	2300      	movs	r3, #0
 800765a:	82fb      	strh	r3, [r7, #22]
 800765c:	e00b      	b.n	8007676 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800765e:	8afb      	ldrh	r3, [r7, #22]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	701a      	strb	r2, [r3, #0]
      pdest++;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	3301      	adds	r3, #1
 800766e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	3302      	adds	r3, #2
 8007674:	82fb      	strh	r3, [r7, #22]
 8007676:	8afa      	ldrh	r2, [r7, #22]
 8007678:	8abb      	ldrh	r3, [r7, #20]
 800767a:	429a      	cmp	r2, r3
 800767c:	d3ef      	bcc.n	800765e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
  }
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	881a      	ldrh	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4413      	add	r3, r2
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	4613      	mov	r3, r2
 80076d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076d4:	2301      	movs	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	789b      	ldrb	r3, [r3, #2]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d002      	beq.n	80076e6 <USBH_CtlReq+0x20>
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d00f      	beq.n	8007704 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076e4:	e027      	b.n	8007736 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2202      	movs	r2, #2
 80076fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80076fe:	2301      	movs	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]
      break;
 8007702:	e018      	b.n	8007736 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f81b 	bl	8007740 <USBH_HandleControl>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <USBH_CtlReq+0x54>
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d106      	bne.n	8007728 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	761a      	strb	r2, [r3, #24]
      break;
 8007726:	e005      	b.n	8007734 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d102      	bne.n	8007734 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	709a      	strb	r2, [r3, #2]
      break;
 8007734:	bf00      	nop
  }
  return status;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af02      	add	r7, sp, #8
 8007746:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007748:	2301      	movs	r3, #1
 800774a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800774c:	2300      	movs	r3, #0
 800774e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	7e1b      	ldrb	r3, [r3, #24]
 8007754:	3b01      	subs	r3, #1
 8007756:	2b0a      	cmp	r3, #10
 8007758:	f200 8156 	bhi.w	8007a08 <USBH_HandleControl+0x2c8>
 800775c:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBH_HandleControl+0x24>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007791 	.word	0x08007791
 8007768:	080077ab 	.word	0x080077ab
 800776c:	08007815 	.word	0x08007815
 8007770:	0800783b 	.word	0x0800783b
 8007774:	08007873 	.word	0x08007873
 8007778:	0800789d 	.word	0x0800789d
 800777c:	080078ef 	.word	0x080078ef
 8007780:	08007911 	.word	0x08007911
 8007784:	0800794d 	.word	0x0800794d
 8007788:	08007973 	.word	0x08007973
 800778c:	080079b1 	.word	0x080079b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f103 0110 	add.w	r1, r3, #16
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	795b      	ldrb	r3, [r3, #5]
 800779a:	461a      	mov	r2, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f943 	bl	8007a28 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	761a      	strb	r2, [r3, #24]
      break;
 80077a8:	e139      	b.n	8007a1e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	795b      	ldrb	r3, [r3, #5]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fcc5 	bl	8008140 <USBH_LL_GetURBState>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d11e      	bne.n	80077fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7c1b      	ldrb	r3, [r3, #16]
 80077c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	8adb      	ldrh	r3, [r3, #22]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077d2:	7b7b      	ldrb	r3, [r7, #13]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d103      	bne.n	80077e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2203      	movs	r2, #3
 80077dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80077de:	e115      	b.n	8007a0c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2205      	movs	r2, #5
 80077e4:	761a      	strb	r2, [r3, #24]
      break;
 80077e6:	e111      	b.n	8007a0c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077e8:	7b7b      	ldrb	r3, [r7, #13]
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d103      	bne.n	80077f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2209      	movs	r2, #9
 80077f2:	761a      	strb	r2, [r3, #24]
      break;
 80077f4:	e10a      	b.n	8007a0c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2207      	movs	r2, #7
 80077fa:	761a      	strb	r2, [r3, #24]
      break;
 80077fc:	e106      	b.n	8007a0c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d003      	beq.n	800780c <USBH_HandleControl+0xcc>
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b02      	cmp	r3, #2
 8007808:	f040 8100 	bne.w	8007a0c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	220b      	movs	r2, #11
 8007810:	761a      	strb	r2, [r3, #24]
      break;
 8007812:	e0fb      	b.n	8007a0c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6899      	ldr	r1, [r3, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	899a      	ldrh	r2, [r3, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	791b      	ldrb	r3, [r3, #4]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f93a 	bl	8007aa6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2204      	movs	r2, #4
 8007836:	761a      	strb	r2, [r3, #24]
      break;
 8007838:	e0f1      	b.n	8007a1e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc7d 	bl	8008140 <USBH_LL_GetURBState>
 8007846:	4603      	mov	r3, r0
 8007848:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2209      	movs	r2, #9
 8007854:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b05      	cmp	r3, #5
 800785a:	d102      	bne.n	8007862 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800785c:	2303      	movs	r3, #3
 800785e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007860:	e0d6      	b.n	8007a10 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b04      	cmp	r3, #4
 8007866:	f040 80d3 	bne.w	8007a10 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	220b      	movs	r2, #11
 800786e:	761a      	strb	r2, [r3, #24]
      break;
 8007870:	e0ce      	b.n	8007a10 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6899      	ldr	r1, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	899a      	ldrh	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	795b      	ldrb	r3, [r3, #5]
 800787e:	2001      	movs	r0, #1
 8007880:	9000      	str	r0, [sp, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8ea 	bl	8007a5c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2206      	movs	r2, #6
 8007898:	761a      	strb	r2, [r3, #24]
      break;
 800789a:	e0c0      	b.n	8007a1e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	795b      	ldrb	r3, [r3, #5]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc4c 	bl	8008140 <USBH_LL_GetURBState>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d103      	bne.n	80078ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2207      	movs	r2, #7
 80078b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078b8:	e0ac      	b.n	8007a14 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b05      	cmp	r3, #5
 80078be:	d105      	bne.n	80078cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	220c      	movs	r2, #12
 80078c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078c6:	2303      	movs	r3, #3
 80078c8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ca:	e0a3      	b.n	8007a14 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d103      	bne.n	80078da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2205      	movs	r2, #5
 80078d6:	761a      	strb	r2, [r3, #24]
      break;
 80078d8:	e09c      	b.n	8007a14 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	f040 8099 	bne.w	8007a14 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220b      	movs	r2, #11
 80078e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078e8:	2302      	movs	r3, #2
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	e092      	b.n	8007a14 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2100      	movs	r1, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f8d5 	bl	8007aa6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2208      	movs	r2, #8
 800790c:	761a      	strb	r2, [r3, #24]

      break;
 800790e:	e086      	b.n	8007a1e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	791b      	ldrb	r3, [r3, #4]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc12 	bl	8008140 <USBH_LL_GetURBState>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d105      	bne.n	8007932 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	220d      	movs	r2, #13
 800792a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007930:	e072      	b.n	8007a18 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d103      	bne.n	8007940 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	220b      	movs	r2, #11
 800793c:	761a      	strb	r2, [r3, #24]
      break;
 800793e:	e06b      	b.n	8007a18 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b05      	cmp	r3, #5
 8007944:	d168      	bne.n	8007a18 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007946:	2303      	movs	r3, #3
 8007948:	73fb      	strb	r3, [r7, #15]
      break;
 800794a:	e065      	b.n	8007a18 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	795b      	ldrb	r3, [r3, #5]
 8007950:	2201      	movs	r2, #1
 8007952:	9200      	str	r2, [sp, #0]
 8007954:	2200      	movs	r2, #0
 8007956:	2100      	movs	r1, #0
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f87f 	bl	8007a5c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	220a      	movs	r2, #10
 800796e:	761a      	strb	r2, [r3, #24]
      break;
 8007970:	e055      	b.n	8007a1e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	795b      	ldrb	r3, [r3, #5]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fbe1 	bl	8008140 <USBH_LL_GetURBState>
 800797e:	4603      	mov	r3, r0
 8007980:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d105      	bne.n	8007994 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	220d      	movs	r2, #13
 8007990:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007992:	e043      	b.n	8007a1c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d103      	bne.n	80079a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2209      	movs	r2, #9
 800799e:	761a      	strb	r2, [r3, #24]
      break;
 80079a0:	e03c      	b.n	8007a1c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d139      	bne.n	8007a1c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	220b      	movs	r2, #11
 80079ac:	761a      	strb	r2, [r3, #24]
      break;
 80079ae:	e035      	b.n	8007a1c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7e5b      	ldrb	r3, [r3, #25]
 80079b4:	3301      	adds	r3, #1
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	765a      	strb	r2, [r3, #25]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7e5b      	ldrb	r3, [r3, #25]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d806      	bhi.n	80079d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079d0:	e025      	b.n	8007a1e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079d8:	2106      	movs	r1, #6
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	795b      	ldrb	r3, [r3, #5]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f90c 	bl	8007c08 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f906 	bl	8007c08 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a02:	2302      	movs	r3, #2
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e00a      	b.n	8007a1e <USBH_HandleControl+0x2de>

    default:
      break;
 8007a08:	bf00      	nop
 8007a0a:	e008      	b.n	8007a1e <USBH_HandleControl+0x2de>
      break;
 8007a0c:	bf00      	nop
 8007a0e:	e006      	b.n	8007a1e <USBH_HandleControl+0x2de>
      break;
 8007a10:	bf00      	nop
 8007a12:	e004      	b.n	8007a1e <USBH_HandleControl+0x2de>
      break;
 8007a14:	bf00      	nop
 8007a16:	e002      	b.n	8007a1e <USBH_HandleControl+0x2de>
      break;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <USBH_HandleControl+0x2de>
      break;
 8007a1c:	bf00      	nop
  }

  return status;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a36:	79f9      	ldrb	r1, [r7, #7]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fb46 	bl	80080de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af04      	add	r7, sp, #16
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	80fb      	strh	r3, [r7, #6]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a80:	7979      	ldrb	r1, [r7, #5]
 8007a82:	7e3b      	ldrb	r3, [r7, #24]
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	9302      	str	r3, [sp, #8]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	2200      	movs	r2, #0
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fb21 	bl	80080de <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b088      	sub	sp, #32
 8007aaa:	af04      	add	r7, sp, #16
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	80fb      	strh	r3, [r7, #6]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007abc:	7979      	ldrb	r1, [r7, #5]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	9302      	str	r3, [sp, #8]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	2301      	movs	r3, #1
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fb03 	bl	80080de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007ad8:	2300      	movs	r3, #0

}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b088      	sub	sp, #32
 8007ae6:	af04      	add	r7, sp, #16
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	4611      	mov	r1, r2
 8007aee:	461a      	mov	r2, r3
 8007af0:	460b      	mov	r3, r1
 8007af2:	80fb      	strh	r3, [r7, #6]
 8007af4:	4613      	mov	r3, r2
 8007af6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b06:	7979      	ldrb	r1, [r7, #5]
 8007b08:	7e3b      	ldrb	r3, [r7, #24]
 8007b0a:	9303      	str	r3, [sp, #12]
 8007b0c:	88fb      	ldrh	r3, [r7, #6]
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	2301      	movs	r3, #1
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	2302      	movs	r3, #2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fade 	bl	80080de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af04      	add	r7, sp, #16
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	80fb      	strh	r3, [r7, #6]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b42:	7979      	ldrb	r1, [r7, #5]
 8007b44:	2300      	movs	r3, #0
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	9302      	str	r3, [sp, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	2301      	movs	r3, #1
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	2302      	movs	r3, #2
 8007b56:	2201      	movs	r2, #1
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fac0 	bl	80080de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af04      	add	r7, sp, #16
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	70fb      	strb	r3, [r7, #3]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70bb      	strb	r3, [r7, #2]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b82:	7878      	ldrb	r0, [r7, #1]
 8007b84:	78ba      	ldrb	r2, [r7, #2]
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	8b3b      	ldrh	r3, [r7, #24]
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	7d3b      	ldrb	r3, [r7, #20]
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	7c3b      	ldrb	r3, [r7, #16]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4603      	mov	r3, r0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa53 	bl	8008042 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa72 	bl	80080a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f836 	bl	8007c44 <USBH_GetFreePipe>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007bdc:	89fb      	ldrh	r3, [r7, #14]
 8007bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00a      	beq.n	8007bfc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007be6:	78fa      	ldrb	r2, [r7, #3]
 8007be8:	89fb      	ldrh	r3, [r7, #14]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	33e0      	adds	r3, #224	; 0xe0
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007bfc:	89fb      	ldrh	r3, [r7, #14]
 8007bfe:	b2db      	uxtb	r3, r3
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	2b0a      	cmp	r3, #10
 8007c18:	d80d      	bhi.n	8007c36 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	33e0      	adds	r3, #224	; 0xe0
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	33e0      	adds	r3, #224	; 0xe0
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
 8007c54:	e00f      	b.n	8007c76 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	33e0      	adds	r3, #224	; 0xe0
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	e007      	b.n	8007c80 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	3301      	adds	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b0a      	cmp	r3, #10
 8007c7a:	d9ec      	bls.n	8007c56 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c90:	2201      	movs	r2, #1
 8007c92:	490e      	ldr	r1, [pc, #56]	; (8007ccc <MX_USB_HOST_Init+0x40>)
 8007c94:	480e      	ldr	r0, [pc, #56]	; (8007cd0 <MX_USB_HOST_Init+0x44>)
 8007c96:	f7fe fca1 	bl	80065dc <USBH_Init>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007ca0:	f7f8 fe9a 	bl	80009d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ca4:	490b      	ldr	r1, [pc, #44]	; (8007cd4 <MX_USB_HOST_Init+0x48>)
 8007ca6:	480a      	ldr	r0, [pc, #40]	; (8007cd0 <MX_USB_HOST_Init+0x44>)
 8007ca8:	f7fe fd26 	bl	80066f8 <USBH_RegisterClass>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007cb2:	f7f8 fe91 	bl	80009d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007cb6:	4806      	ldr	r0, [pc, #24]	; (8007cd0 <MX_USB_HOST_Init+0x44>)
 8007cb8:	f7fe fdaa 	bl	8006810 <USBH_Start>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007cc2:	f7f8 fe89 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007cc6:	bf00      	nop
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	08007ced 	.word	0x08007ced
 8007cd0:	20000240 	.word	0x20000240
 8007cd4:	2000000c 	.word	0x2000000c

08007cd8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007cdc:	4802      	ldr	r0, [pc, #8]	; (8007ce8 <MX_USB_HOST_Process+0x10>)
 8007cde:	f7fe fda7 	bl	8006830 <USBH_Process>
}
 8007ce2:	bf00      	nop
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000240 	.word	0x20000240

08007cec <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007cf8:	78fb      	ldrb	r3, [r7, #3]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d819      	bhi.n	8007d34 <USBH_UserProcess+0x48>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USBH_UserProcess+0x1c>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	08007d25 	.word	0x08007d25
 8007d10:	08007d35 	.word	0x08007d35
 8007d14:	08007d2d 	.word	0x08007d2d
 8007d18:	08007d1d 	.word	0x08007d1d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d1c:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <USBH_UserProcess+0x58>)
 8007d1e:	2203      	movs	r2, #3
 8007d20:	701a      	strb	r2, [r3, #0]
  break;
 8007d22:	e008      	b.n	8007d36 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <USBH_UserProcess+0x58>)
 8007d26:	2202      	movs	r2, #2
 8007d28:	701a      	strb	r2, [r3, #0]
  break;
 8007d2a:	e004      	b.n	8007d36 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <USBH_UserProcess+0x58>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	701a      	strb	r2, [r3, #0]
  break;
 8007d32:	e000      	b.n	8007d36 <USBH_UserProcess+0x4a>

  default:
  break;
 8007d34:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	200000b0 	.word	0x200000b0

08007d48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d50:	f107 0314 	add.w	r3, r7, #20
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	60da      	str	r2, [r3, #12]
 8007d5e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d68:	d147      	bne.n	8007dfa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	613b      	str	r3, [r7, #16]
 8007d6e:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	4a24      	ldr	r2, [pc, #144]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007d74:	f043 0301 	orr.w	r3, r3, #1
 8007d78:	6313      	str	r3, [r2, #48]	; 0x30
 8007d7a:	4b22      	ldr	r3, [pc, #136]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	4619      	mov	r1, r3
 8007d9a:	481b      	ldr	r0, [pc, #108]	; (8007e08 <HAL_HCD_MspInit+0xc0>)
 8007d9c:	f7f9 fa5e 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007da0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da6:	2302      	movs	r3, #2
 8007da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dae:	2303      	movs	r3, #3
 8007db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007db2:	230a      	movs	r3, #10
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db6:	f107 0314 	add.w	r3, r7, #20
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4812      	ldr	r0, [pc, #72]	; (8007e08 <HAL_HCD_MspInit+0xc0>)
 8007dbe:	f7f9 fa4d 	bl	800125c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dc2:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	4a0f      	ldr	r2, [pc, #60]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dcc:	6353      	str	r3, [r2, #52]	; 0x34
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	4a0b      	ldr	r2, [pc, #44]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <HAL_HCD_MspInit+0xbc>)
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	2043      	movs	r0, #67	; 0x43
 8007df0:	f7f9 f9fd 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007df4:	2043      	movs	r0, #67	; 0x43
 8007df6:	f7f9 fa16 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3728      	adds	r7, #40	; 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	40023800 	.word	0x40023800
 8007e08:	40020000 	.word	0x40020000

08007e0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff f8db 	bl	8006fd6 <USBH_LL_IncTimer>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff f913 	bl	8007062 <USBH_LL_Connect>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff f91c 	bl	8007090 <USBH_LL_Disconnect>
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff f8cd 	bl	800702a <USBH_LL_PortEnabled>
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f8cd 	bl	8007046 <USBH_LL_PortDisabled>
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d12a      	bne.n	8007f1c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ec6:	4a18      	ldr	r2, [pc, #96]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ed2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ed8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007edc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007eea:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <USBH_LL_Init+0x74>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <USBH_LL_Init+0x74>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007efc:	480a      	ldr	r0, [pc, #40]	; (8007f28 <USBH_LL_Init+0x74>)
 8007efe:	f7f9 fb4a 	bl	8001596 <HAL_HCD_Init>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f08:	f7f8 fd66 	bl	80009d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f0c:	4806      	ldr	r0, [pc, #24]	; (8007f28 <USBH_LL_Init+0x74>)
 8007f0e:	f7f9 ff2e 	bl	8001d6e <HAL_HCD_GetCurrentFrame>
 8007f12:	4603      	mov	r3, r0
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff f84e 	bl	8006fb8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000618 	.word	0x20000618

08007f2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f9 fe9d 	bl	8001c82 <HAL_HCD_Start>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f95c 	bl	800820c <USBH_Get_USB_Status>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7f9 fea5 	bl	8001cc8 <HAL_HCD_Stop>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f941 	bl	800820c <USBH_Get_USB_Status>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7f9 feed 	bl	8001d8a <HAL_HCD_GetCurrentSpeed>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d00c      	beq.n	8007fd0 <USBH_LL_GetSpeed+0x38>
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d80d      	bhi.n	8007fd6 <USBH_LL_GetSpeed+0x3e>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <USBH_LL_GetSpeed+0x2c>
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d003      	beq.n	8007fca <USBH_LL_GetSpeed+0x32>
 8007fc2:	e008      	b.n	8007fd6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc8:	e008      	b.n	8007fdc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fce:	e005      	b.n	8007fdc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd4:	e002      	b.n	8007fdc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fda:	bf00      	nop
  }
  return  speed;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7f9 fe80 	bl	8001d02 <HAL_HCD_ResetPort>
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f8ff 	bl	800820c <USBH_Get_USB_Status>
 800800e:	4603      	mov	r3, r0
 8008010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008012:	7bbb      	ldrb	r3, [r7, #14]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800802e:	78fa      	ldrb	r2, [r7, #3]
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f7f9 fe87 	bl	8001d46 <HAL_HCD_HC_GetXferCount>
 8008038:	4603      	mov	r3, r0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008042:	b590      	push	{r4, r7, lr}
 8008044:	b089      	sub	sp, #36	; 0x24
 8008046:	af04      	add	r7, sp, #16
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	4608      	mov	r0, r1
 800804c:	4611      	mov	r1, r2
 800804e:	461a      	mov	r2, r3
 8008050:	4603      	mov	r3, r0
 8008052:	70fb      	strb	r3, [r7, #3]
 8008054:	460b      	mov	r3, r1
 8008056:	70bb      	strb	r3, [r7, #2]
 8008058:	4613      	mov	r3, r2
 800805a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800806a:	787c      	ldrb	r4, [r7, #1]
 800806c:	78ba      	ldrb	r2, [r7, #2]
 800806e:	78f9      	ldrb	r1, [r7, #3]
 8008070:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008072:	9302      	str	r3, [sp, #8]
 8008074:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4623      	mov	r3, r4
 8008082:	f7f9 faea 	bl	800165a <HAL_HCD_HC_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f8bd 	bl	800820c <USBH_Get_USB_Status>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008096:	7bbb      	ldrb	r3, [r7, #14]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bd90      	pop	{r4, r7, pc}

080080a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f9 fb5a 	bl	8001778 <HAL_HCD_HC_Halt>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f89e 	bl	800820c <USBH_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80080de:	b590      	push	{r4, r7, lr}
 80080e0:	b089      	sub	sp, #36	; 0x24
 80080e2:	af04      	add	r7, sp, #16
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	4608      	mov	r0, r1
 80080e8:	4611      	mov	r1, r2
 80080ea:	461a      	mov	r2, r3
 80080ec:	4603      	mov	r3, r0
 80080ee:	70fb      	strb	r3, [r7, #3]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70bb      	strb	r3, [r7, #2]
 80080f4:	4613      	mov	r3, r2
 80080f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008106:	787c      	ldrb	r4, [r7, #1]
 8008108:	78ba      	ldrb	r2, [r7, #2]
 800810a:	78f9      	ldrb	r1, [r7, #3]
 800810c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008110:	9303      	str	r3, [sp, #12]
 8008112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008114:	9302      	str	r3, [sp, #8]
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4623      	mov	r3, r4
 8008122:	f7f9 fb4d 	bl	80017c0 <HAL_HCD_HC_SubmitRequest>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f86d 	bl	800820c <USBH_Get_USB_Status>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008136:	7bbb      	ldrb	r3, [r7, #14]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bd90      	pop	{r4, r7, pc}

08008140 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f7f9 fde1 	bl	8001d1e <HAL_HCD_HC_GetURBState>
 800815c:	4603      	mov	r3, r0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008178:	2b01      	cmp	r3, #1
 800817a:	d103      	bne.n	8008184 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	4618      	mov	r0, r3
 8008180:	f000 f870 	bl	8008264 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008184:	20c8      	movs	r0, #200	; 0xc8
 8008186:	f7f8 ff33 	bl	8000ff0 <HAL_Delay>
  return USBH_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
 80081a0:	4613      	mov	r3, r2
 80081a2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081aa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	212c      	movs	r1, #44	; 0x2c
 80081b2:	fb01 f303 	mul.w	r3, r1, r3
 80081b6:	4413      	add	r3, r2
 80081b8:	333b      	adds	r3, #59	; 0x3b
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	212c      	movs	r1, #44	; 0x2c
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	4413      	add	r3, r2
 80081cc:	3354      	adds	r3, #84	; 0x54
 80081ce:	78ba      	ldrb	r2, [r7, #2]
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e008      	b.n	80081e6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	212c      	movs	r1, #44	; 0x2c
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	4413      	add	r3, r2
 80081e0:	3355      	adds	r3, #85	; 0x55
 80081e2:	78ba      	ldrb	r2, [r7, #2]
 80081e4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7f8 fef7 	bl	8000ff0 <HAL_Delay>
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	2b03      	cmp	r3, #3
 800821e:	d817      	bhi.n	8008250 <USBH_Get_USB_Status+0x44>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <USBH_Get_USB_Status+0x1c>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	08008239 	.word	0x08008239
 800822c:	0800823f 	.word	0x0800823f
 8008230:	08008245 	.word	0x08008245
 8008234:	0800824b 	.word	0x0800824b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	e00b      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800823e:	2302      	movs	r3, #2
 8008240:	73fb      	strb	r3, [r7, #15]
    break;
 8008242:	e008      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
    break;
 8008248:	e005      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	73fb      	strb	r3, [r7, #15]
    break;
 800824e:	e002      	b.n	8008256 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008250:	2302      	movs	r3, #2
 8008252:	73fb      	strb	r3, [r7, #15]
    break;
 8008254:	bf00      	nop
  }
  return usb_status;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e001      	b.n	8008282 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	461a      	mov	r2, r3
 8008286:	2101      	movs	r1, #1
 8008288:	4803      	ldr	r0, [pc, #12]	; (8008298 <MX_DriverVbusFS+0x34>)
 800828a:	f7f9 f96b 	bl	8001564 <HAL_GPIO_WritePin>
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40020800 	.word	0x40020800

0800829c <__errno>:
 800829c:	4b01      	ldr	r3, [pc, #4]	; (80082a4 <__errno+0x8>)
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	2000002c 	.word	0x2000002c

080082a8 <__libc_init_array>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	4d0d      	ldr	r5, [pc, #52]	; (80082e0 <__libc_init_array+0x38>)
 80082ac:	4c0d      	ldr	r4, [pc, #52]	; (80082e4 <__libc_init_array+0x3c>)
 80082ae:	1b64      	subs	r4, r4, r5
 80082b0:	10a4      	asrs	r4, r4, #2
 80082b2:	2600      	movs	r6, #0
 80082b4:	42a6      	cmp	r6, r4
 80082b6:	d109      	bne.n	80082cc <__libc_init_array+0x24>
 80082b8:	4d0b      	ldr	r5, [pc, #44]	; (80082e8 <__libc_init_array+0x40>)
 80082ba:	4c0c      	ldr	r4, [pc, #48]	; (80082ec <__libc_init_array+0x44>)
 80082bc:	f000 f8f8 	bl	80084b0 <_init>
 80082c0:	1b64      	subs	r4, r4, r5
 80082c2:	10a4      	asrs	r4, r4, #2
 80082c4:	2600      	movs	r6, #0
 80082c6:	42a6      	cmp	r6, r4
 80082c8:	d105      	bne.n	80082d6 <__libc_init_array+0x2e>
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d0:	4798      	blx	r3
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7ee      	b.n	80082b4 <__libc_init_array+0xc>
 80082d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082da:	4798      	blx	r3
 80082dc:	3601      	adds	r6, #1
 80082de:	e7f2      	b.n	80082c6 <__libc_init_array+0x1e>
 80082e0:	080084fc 	.word	0x080084fc
 80082e4:	080084fc 	.word	0x080084fc
 80082e8:	080084fc 	.word	0x080084fc
 80082ec:	08008500 	.word	0x08008500

080082f0 <malloc>:
 80082f0:	4b02      	ldr	r3, [pc, #8]	; (80082fc <malloc+0xc>)
 80082f2:	4601      	mov	r1, r0
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f000 b863 	b.w	80083c0 <_malloc_r>
 80082fa:	bf00      	nop
 80082fc:	2000002c 	.word	0x2000002c

08008300 <free>:
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <free+0xc>)
 8008302:	4601      	mov	r1, r0
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f000 b80b 	b.w	8008320 <_free_r>
 800830a:	bf00      	nop
 800830c:	2000002c 	.word	0x2000002c

08008310 <memset>:
 8008310:	4402      	add	r2, r0
 8008312:	4603      	mov	r3, r0
 8008314:	4293      	cmp	r3, r2
 8008316:	d100      	bne.n	800831a <memset+0xa>
 8008318:	4770      	bx	lr
 800831a:	f803 1b01 	strb.w	r1, [r3], #1
 800831e:	e7f9      	b.n	8008314 <memset+0x4>

08008320 <_free_r>:
 8008320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008322:	2900      	cmp	r1, #0
 8008324:	d048      	beq.n	80083b8 <_free_r+0x98>
 8008326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f1a1 0404 	sub.w	r4, r1, #4
 8008332:	bfb8      	it	lt
 8008334:	18e4      	addlt	r4, r4, r3
 8008336:	f000 f8ad 	bl	8008494 <__malloc_lock>
 800833a:	4a20      	ldr	r2, [pc, #128]	; (80083bc <_free_r+0x9c>)
 800833c:	9801      	ldr	r0, [sp, #4]
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	4615      	mov	r5, r2
 8008342:	b933      	cbnz	r3, 8008352 <_free_r+0x32>
 8008344:	6063      	str	r3, [r4, #4]
 8008346:	6014      	str	r4, [r2, #0]
 8008348:	b003      	add	sp, #12
 800834a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800834e:	f000 b8a7 	b.w	80084a0 <__malloc_unlock>
 8008352:	42a3      	cmp	r3, r4
 8008354:	d90b      	bls.n	800836e <_free_r+0x4e>
 8008356:	6821      	ldr	r1, [r4, #0]
 8008358:	1862      	adds	r2, r4, r1
 800835a:	4293      	cmp	r3, r2
 800835c:	bf04      	itt	eq
 800835e:	681a      	ldreq	r2, [r3, #0]
 8008360:	685b      	ldreq	r3, [r3, #4]
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	bf04      	itt	eq
 8008366:	1852      	addeq	r2, r2, r1
 8008368:	6022      	streq	r2, [r4, #0]
 800836a:	602c      	str	r4, [r5, #0]
 800836c:	e7ec      	b.n	8008348 <_free_r+0x28>
 800836e:	461a      	mov	r2, r3
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	b10b      	cbz	r3, 8008378 <_free_r+0x58>
 8008374:	42a3      	cmp	r3, r4
 8008376:	d9fa      	bls.n	800836e <_free_r+0x4e>
 8008378:	6811      	ldr	r1, [r2, #0]
 800837a:	1855      	adds	r5, r2, r1
 800837c:	42a5      	cmp	r5, r4
 800837e:	d10b      	bne.n	8008398 <_free_r+0x78>
 8008380:	6824      	ldr	r4, [r4, #0]
 8008382:	4421      	add	r1, r4
 8008384:	1854      	adds	r4, r2, r1
 8008386:	42a3      	cmp	r3, r4
 8008388:	6011      	str	r1, [r2, #0]
 800838a:	d1dd      	bne.n	8008348 <_free_r+0x28>
 800838c:	681c      	ldr	r4, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	6053      	str	r3, [r2, #4]
 8008392:	4421      	add	r1, r4
 8008394:	6011      	str	r1, [r2, #0]
 8008396:	e7d7      	b.n	8008348 <_free_r+0x28>
 8008398:	d902      	bls.n	80083a0 <_free_r+0x80>
 800839a:	230c      	movs	r3, #12
 800839c:	6003      	str	r3, [r0, #0]
 800839e:	e7d3      	b.n	8008348 <_free_r+0x28>
 80083a0:	6825      	ldr	r5, [r4, #0]
 80083a2:	1961      	adds	r1, r4, r5
 80083a4:	428b      	cmp	r3, r1
 80083a6:	bf04      	itt	eq
 80083a8:	6819      	ldreq	r1, [r3, #0]
 80083aa:	685b      	ldreq	r3, [r3, #4]
 80083ac:	6063      	str	r3, [r4, #4]
 80083ae:	bf04      	itt	eq
 80083b0:	1949      	addeq	r1, r1, r5
 80083b2:	6021      	streq	r1, [r4, #0]
 80083b4:	6054      	str	r4, [r2, #4]
 80083b6:	e7c7      	b.n	8008348 <_free_r+0x28>
 80083b8:	b003      	add	sp, #12
 80083ba:	bd30      	pop	{r4, r5, pc}
 80083bc:	200000b4 	.word	0x200000b4

080083c0 <_malloc_r>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	1ccd      	adds	r5, r1, #3
 80083c4:	f025 0503 	bic.w	r5, r5, #3
 80083c8:	3508      	adds	r5, #8
 80083ca:	2d0c      	cmp	r5, #12
 80083cc:	bf38      	it	cc
 80083ce:	250c      	movcc	r5, #12
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	4606      	mov	r6, r0
 80083d4:	db01      	blt.n	80083da <_malloc_r+0x1a>
 80083d6:	42a9      	cmp	r1, r5
 80083d8:	d903      	bls.n	80083e2 <_malloc_r+0x22>
 80083da:	230c      	movs	r3, #12
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	2000      	movs	r0, #0
 80083e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e2:	f000 f857 	bl	8008494 <__malloc_lock>
 80083e6:	4921      	ldr	r1, [pc, #132]	; (800846c <_malloc_r+0xac>)
 80083e8:	680a      	ldr	r2, [r1, #0]
 80083ea:	4614      	mov	r4, r2
 80083ec:	b99c      	cbnz	r4, 8008416 <_malloc_r+0x56>
 80083ee:	4f20      	ldr	r7, [pc, #128]	; (8008470 <_malloc_r+0xb0>)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	b923      	cbnz	r3, 80083fe <_malloc_r+0x3e>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 f83c 	bl	8008474 <_sbrk_r>
 80083fc:	6038      	str	r0, [r7, #0]
 80083fe:	4629      	mov	r1, r5
 8008400:	4630      	mov	r0, r6
 8008402:	f000 f837 	bl	8008474 <_sbrk_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d123      	bne.n	8008452 <_malloc_r+0x92>
 800840a:	230c      	movs	r3, #12
 800840c:	6033      	str	r3, [r6, #0]
 800840e:	4630      	mov	r0, r6
 8008410:	f000 f846 	bl	80084a0 <__malloc_unlock>
 8008414:	e7e3      	b.n	80083de <_malloc_r+0x1e>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	1b5b      	subs	r3, r3, r5
 800841a:	d417      	bmi.n	800844c <_malloc_r+0x8c>
 800841c:	2b0b      	cmp	r3, #11
 800841e:	d903      	bls.n	8008428 <_malloc_r+0x68>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	441c      	add	r4, r3
 8008424:	6025      	str	r5, [r4, #0]
 8008426:	e004      	b.n	8008432 <_malloc_r+0x72>
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	42a2      	cmp	r2, r4
 800842c:	bf0c      	ite	eq
 800842e:	600b      	streq	r3, [r1, #0]
 8008430:	6053      	strne	r3, [r2, #4]
 8008432:	4630      	mov	r0, r6
 8008434:	f000 f834 	bl	80084a0 <__malloc_unlock>
 8008438:	f104 000b 	add.w	r0, r4, #11
 800843c:	1d23      	adds	r3, r4, #4
 800843e:	f020 0007 	bic.w	r0, r0, #7
 8008442:	1ac2      	subs	r2, r0, r3
 8008444:	d0cc      	beq.n	80083e0 <_malloc_r+0x20>
 8008446:	1a1b      	subs	r3, r3, r0
 8008448:	50a3      	str	r3, [r4, r2]
 800844a:	e7c9      	b.n	80083e0 <_malloc_r+0x20>
 800844c:	4622      	mov	r2, r4
 800844e:	6864      	ldr	r4, [r4, #4]
 8008450:	e7cc      	b.n	80083ec <_malloc_r+0x2c>
 8008452:	1cc4      	adds	r4, r0, #3
 8008454:	f024 0403 	bic.w	r4, r4, #3
 8008458:	42a0      	cmp	r0, r4
 800845a:	d0e3      	beq.n	8008424 <_malloc_r+0x64>
 800845c:	1a21      	subs	r1, r4, r0
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f808 	bl	8008474 <_sbrk_r>
 8008464:	3001      	adds	r0, #1
 8008466:	d1dd      	bne.n	8008424 <_malloc_r+0x64>
 8008468:	e7cf      	b.n	800840a <_malloc_r+0x4a>
 800846a:	bf00      	nop
 800846c:	200000b4 	.word	0x200000b4
 8008470:	200000b8 	.word	0x200000b8

08008474 <_sbrk_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d06      	ldr	r5, [pc, #24]	; (8008490 <_sbrk_r+0x1c>)
 8008478:	2300      	movs	r3, #0
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	602b      	str	r3, [r5, #0]
 8008480:	f7f8 fcd2 	bl	8000e28 <_sbrk>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_sbrk_r+0x1a>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_sbrk_r+0x1a>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	2000091c 	.word	0x2000091c

08008494 <__malloc_lock>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__malloc_lock+0x8>)
 8008496:	f000 b809 	b.w	80084ac <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	20000924 	.word	0x20000924

080084a0 <__malloc_unlock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__malloc_unlock+0x8>)
 80084a2:	f000 b804 	b.w	80084ae <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	20000924 	.word	0x20000924

080084ac <__retarget_lock_acquire_recursive>:
 80084ac:	4770      	bx	lr

080084ae <__retarget_lock_release_recursive>:
 80084ae:	4770      	bx	lr

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
